package Thermostat2side
public
	with Base_Types;
	with Data_Model;

	system Thermostat2side
		features
			power: out data port Base_Types::Float {Data_Model::Initial_Value => ("0");};
			t_out: out data port Base_Types::Float {Data_Model::Initial_Value => ("0");};
			t_in1: in data port Base_Types::Float;
			t_in2: in data port Base_Types::Float;
			curr_temp: in data port Base_Types::Float;
			on_control: out event port; 
			off_control: out event port; 
	end Thermostat2side;

	system implementation Thermostat2side.simple
		subcomponents
			ctrlProc: process ThermostatProc.simple;
		connections
			O1: port ctrlProc.on_control -> on_control;
			O2: port ctrlProc.off_control -> off_control;
			O3: port ctrlProc.power -> power;
			O4: port ctrlProc.t_out -> t_out;
			I1: port t_in1 -> ctrlProc.t_in1;
			I2: port t_in2 -> ctrlProc.t_in2;
			I3: port curr_temp -> ctrlProc.curr_temp;
	end Thermostat2side.simple;
	
	system implementation Thermostat2side.complex extends Thermostat2side.simple
		subcomponents
			ctrlProc: refined to process ThermostatProc.complex;
	end Thermostat2side.complex;

	process ThermostatProc
		features
			power: out data port Base_Types::Float;
			t_out: out data port Base_Types::Float;
			t_in1: in data port Base_Types::Float;
			t_in2: in data port Base_Types::Float;
			curr_temp: in data port Base_Types::Float;
			on_control: out event port;
			off_control: out event port;
	end ThermostatProc;

	process implementation ThermostatProc.simple
		subcomponents
			ctrlThread: thread ThermostatThread.simple;
		connections
			O1: port ctrlThread.on_control -> on_control;
			O2: port ctrlThread.off_control -> off_control;
			O3: port ctrlThread.power -> power;
			O4: port ctrlThread.t_out -> t_out;
			I1: port t_in1 -> ctrlThread.t_in1;
			I2: port t_in2 -> ctrlThread.t_in2;
			I3: port curr_temp -> ctrlThread.curr_temp;
	end ThermostatProc.simple;

	process implementation ThermostatProc.complex extends ThermostatProc.simple
		subcomponents
			ctrlThread: refined to thread ThermostatThread.complex;
	end ThermostatProc.complex;

	thread ThermostatThread
		features
			power: out data port Base_Types::Float;
			t_out: out data port Base_Types::Float;
			t_in1: in data port Base_Types::Float;
			t_in2: in data port Base_Types::Float;
			curr_temp: in data port Base_Types::Float;
			on_control: out event port;
			off_control: out event port;
		properties
			Dispatch_Protocol => Periodic;
	end ThermostatThread;

	thread implementation ThermostatThread.simple
        annex behavior_specification {**
           variables
            a : Base_Types::Float;
          states
            init : initial complete state;
            exec : state;
          transitions
            init -[on dispatch]-> exec {
              t_out := curr_temp
            };
            exec -[ true ]-> init {
                 a := -(curr_temp - t_in1);
                 a := a - (curr_temp - t_in2);
                if(a > 10){
                    power := 5;
                    on_control!
                }
                elsif(a > 3){
                    power := 3;
                    on_control!
                }
                else{
                    power := 0;
                    off_control!
                }
                end if
            };
        **};
	end ThermostatThread.simple;

	thread implementation ThermostatThread.complex extends ThermostatThread.simple
		annex behavior_specification {**
          variables
            a : Base_Types::Float;
          states
            init : initial complete state;
            exec : state;
          transitions
            init -[on dispatch]-> exec {
              t_out := curr_temp
            };
            exec -[curr_temp > 50]-> init {
              off_control !;
              power := 0
            };
            exec -[curr_temp < 20]-> init {
              on_control !;
              power := 10
            };
            exec -[otherwise]-> init {
              a := -(curr_temp - t_in1);
              a := a - (curr_temp - t_in2);
		  	if(a > 10){
		  		power := 5;
		  		on_control!
		  	}
		  	elsif(a > 5){
		  		power := 4;
		  		on_control!
		  	}
		  	elsif(a > 3){
		  		power := 3;
		  		on_control!
		  	}
		  	elsif(a > 0){
		  		power := 2;
		  		on_control!
		  	}
		  	else{
		  		power := 0;
		  		off_control!
		  	}
		  	end if
            };
        **};
	end ThermostatThread.complex;

end Thermostat2side;
