I"Ì<p>This benchmark models represent the rendezvous control of distributed drones
with single-integrator dynamics. Each drone communicates its own position and
sets a proper velocity. The goal of these models is for all drones to arrive
near a common location simultaneously without any collision.</p>

<h3 id="download">Download</h3>
<p>You can download the benchmark models: <a href="../Drone_Rendezvous_Single.zip">Drone_Rendezvous_Single.zip</a></p>

<h3 id="architecture">Architecture</h3>
<p><img src="../../images/architecture_rendezvous_single.png" width="80%" height="80%" /></p>

<h3 id="case-study">Case Study</h3>

<h3 id="hybridsynchaadl-model-controller-and-environment">HybridSynchAADL Model: Controller and Environment</h3>
<p>Controller.aadl</p>
<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
</code></pre></div></div>
<p>Environment.aadl</p>
<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>	system Environment1D
		features
			currX : out data port Base_Types::Float;		
			velX : in data port Base_Types::Float;
		properties
			Hybrid_SynchAADL::isEnvironment =&gt; true;
	end Environment1D;
	system implementation Environment1D.impl
		subcomponents
			x : data Base_Types::Float;
			dotx : data Base_Types::Float;
		connections
			C1: port x -&gt; currX;
			C2: port velX -&gt; dotx;
		properties
			Hybrid_SynchAADL::ContinuousDynamics =&gt;
			 "x(t) = ((0.001) * dotx * t) + x(0);";
	end Environment1D.impl;
	
	system Environment2D extends Environment1D
		features
			currY : out data port Base_Types::Float;		
			velY : in data port Base_Types::Float;
		properties
			Hybrid_SynchAADL::isEnvironment =&gt; true;	
	end Environment2D;
	system implementation Environment2D.impl extends Environment1D.impl
		subcomponents
			y : data Base_Types::Float;
			doty : data Base_Types::Float;
		connections
			C3: port y -&gt; currY;
			C4: port velY -&gt; doty;
		properties
			Hybrid_SynchAADL::ContinuousDynamics =&gt;
			 "x(t) = ((0.001) * dotx * t) + x(0); y(t) = ((0.001) * doty * t) + y(0);";
	end Environment2D.impl;
</code></pre></div></div>

<h3 id="safety-requirement">Safety Requirement</h3>

<p>We verify safety invariant property which represents that drones do not collide. We analyze them up to
bound 500 ms.</p>

<p>The example of PSPC file containing safety invariant property is as follows:</p>
<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>proposition [initial] : abs(drone1.environment.x - 2.8) &lt; 0.1 and abs(drone1.environment.y - 2.8) and
                        abs(drone2.environment.x - 1.5) &lt; 0.1 and abs(drone2.environment.y - 1.5);

proposition [twoclose] : abs(drone1.environment.x - drone2.environment.x) &lt; 0.5 and
                         abs(drone1.environment.y - drone2.environment.y) &lt; 0.5

invariant [tb_500]: ?initial ==&gt; not(?twoclose) in time 500;
</code></pre></div></div>

<h3 id="analysis-results">Analysis Results</h3>

<p><br />
<br /></p>
:ET