I"È<h1 id="networked-thermostat-controllers">Networked Thermostat Controllers</h1>

<p>This benchmark model represents the networked thermostat benchmark. Each
thermostat component communicates its own temperature to the neighboring
thermostat component and sets its hearter power. The goal of these models is
for all thermostats reach the same temperature.</p>

<h2 id="download">Download</h2>
<p>You can download the benchmark model: <a href="../Thermostat.zip">Thermostat.zip</a></p>

<h2 id="top-level-components">Top-Level Components</h2>
<p>We provide six cases of benchmark model: two, three and four thermostat
controller with simple control logic or complex control logic.</p>

<h2 id="architecture">Architecture</h2>
<p><img src="../../images/architecture_thermostat.png" /></p>

<h2 id="hybridsynchaadl-model-controller-and-environment">HybridSynchAADL Model: Controller and Environment</h2>
<p>Controller.aadl</p>
<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>thread ThermostatThread
  features
    on_control: out event port;
    off_control: out event port;
    power : out data port Base_Types::Float;
    t_out : out data port Base_Types::Float;
    t_in: in data port Base_Types::Float;
    curr_temp : in data port Base_Types::Float;
  properties
    Dispatch_Protocol =&gt; Periodic;
end ThermostatThread;

thread implementation ThermostatThread.simple
  annex behavior_specification{**
    variables
          a : Base_Types::Float;
    states
      init : initial complete state;
      exec : state;
    transitions
      init -[ on dispatch ]-&gt; exec {
        t_out := curr_temp
      };

      exec -[ true ]-&gt; init {
        a := -(curr_temp - t_in);
        if(a &gt; 10){
            power := 5;
            on_control!
        }
        elsif(a &gt; 3){
            power := 3;
            on_control!
        }
        else{
            power := 0;
            off_control!
        }
        end if
      };
  **};
end ThermostatThread.simple;


thread implementation ThermostatThread.complex extends ThermostatThread.simple
    annex behavior_specification{**
    variables
      a : Base_Types::Float;
    states
      init : initial complete state;
      exec : state;
    transitions
      init -[ on dispatch ]-&gt; exec {
        t_out := curr_temp  
      };
      
      exec -[ curr_temp &gt; 50 ]-&gt; init {
        off_control!;
        power := 0
      };
      
      exec -[ curr_temp &lt; 20 ]-&gt; init {
        on_control!;
        power := 10
      };
      
      exec -[ otherwise ]-&gt; init {
        a := -(curr_temp - t_in);
                
        if(a &gt; 10){
          power := 5;
          on_control!
        }
        elsif(a &gt; 5){
          power := 4;
          on_control!
        }
        elsif(a &gt; 3){
          power := 3;
          on_control!
        }
        elsif(a &gt; 0){
          power := 2;
          on_control!
        }
        else{
          power := 0;
          off_control!
        }
        end if
      };
  **};
end ThermostatThread.complex;
</code></pre></div></div>
<p>Environment.aadl</p>
<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>system RoomEnv
  features
    temp : out data port Base_Types::Float {Data_Model::Initial_Value =&gt; ("0");};
    power : in data port Base_Types::Float;   
    on_control: in event port;
    off_control : in event port;
  properties
    Hybrid_SynchAADL::isEnvironment =&gt; true;
end RoomEnv;
system implementation RoomEnv.impl
  subcomponents
    x: data Base_Types::Float;
    p: data Base_Types::Float {Data_Model::Initial_Value =&gt; ("0");};
  connections
    C: port x -&gt; temp;
    P: port power -&gt; p;
  modes
    off: initial mode;
    on: mode;
    off -[on_control]-&gt; on;
    off -[off_control]-&gt; off;
    on -[on_control]-&gt; on;
    on -[off_control]-&gt; off;
  properties
    Hybrid_SynchAADL::ContinuousDynamics =&gt; 
      "x(t) = x(0) + (0.01 * p) * t; " in modes (on), 
      "x(t) = x(0) - (0.001 * t);" in modes (off);
end RoomEnv.impl; 
</code></pre></div></div>

<h2 id="safety-requirement">Safety Requirement</h2>

<p>We analyze the safety invariant property where temperature of each thermostat
is maintained between 20 and 50 degrees up to bound 500 ms.</p>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>

</code></pre></div></div>

<h2 id="analysis-results">Analysis Results</h2>
<p><img src="../../images/results_thermostat.png" /></p>

<p><br />
<br /></p>
:ET