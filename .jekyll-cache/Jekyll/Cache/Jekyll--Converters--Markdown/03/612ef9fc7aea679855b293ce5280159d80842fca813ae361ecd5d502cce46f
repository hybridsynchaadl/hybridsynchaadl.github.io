I"u<p>
This page explains the artifact for our paper: "An Extension of HybridSynchAADL
and Its Application to Collaborating Autonomous UAVs" by J. Lee, K.  Bae, and
P. C. Ã–lveczky. This page includes the HybridSynchAADL tool, case study model,
and executable formal semantics.
</p>

<h2>Abstract</h2>
<p>
Many collective adaptive systems consist of distributed nodes that communicate
with each other and with their physical environments, but that logically should
operate in a synchronous way. HybridSynchAADL is a recent modeling language
and formal analysis tool for such virtually synchronous cyber-physical systems
(CPSs). HybridSynchAADL leverages the Hybrid PALS equivalence to reduce the
hard prob- lem of designing and verifying virtually synchronous CPSsâ€”with
asynchronous communication, network delays, imprecise local clocks, contin
uous
dynamics, etc.â€”to the much easier tasks of designing and verifying their
underlying synchronous designs. The HybridSynchAADL model- ing language is an
annotated subset of the industrial modeling standard AADL, and
Maude-with-SMT-based formal analysis of HybridSynch- AADL models has been
integrated into the OSATE tool environment for AADL. Up to now HybridSynchAADL
has lacked important program- ming language features such as compound data
types and user-defined functions. This makes it difficult to model advanced
control logics of collective adaptive systems. In this paper, we extend the
HybridSynch- AADL language, its formal semantics, and its analysis tool to
support array and record data types and user-defined functions. We apply our
extension of HybridSynchAADL to design and analyze a collection of
collaborating autonomous drones that adapt to their environments.
</p>

<h2>Complete AADL Specification for the Case Study</h2>
<p>
The HybridSynchAADL model of the packet delivery system example from out paper
is provided below. The archive file contains AADL source code (in packages
directory) and the requirement specification (in requirements directory).
</p>
<ul>
  <li><a href="https://www.dropbox.com/sh/o7f2igk8s0zktu5/AAD8TApEPw_ecr2-m_6bRMlqa?dl=0">model.zip</a></li>
</ul>
<p>
We also defines an executable formal semantic for this case study. This
semantics is significantly adapted from <a href="https://hybridsynchaadl.github.io/artifact/isola2022/sttt-paper.pdf">this paper</a> and extended to deal
with array data types, arrays of components and ports, and subprograms.
</p>
<ul>
  <li><a href="https://www.dropbox.com/sh/sg2yi2a46ipm2lj/AAAPWFSfJKq1LIvFJ7e0wOtqa?dl=0">semantics.zip</a></li>
</ul>

<h2>The HybridSynchAADL Tool</h2>
<p>
To install our hybridsynchaadl tool, download and unzip the following archive files:
<a href="https://www.dropbox.com/sh/rqhw6v8zgyxso84/AADPsfTjIGR8gFxClVxtIRKja?dl=0">artifact.zip</a>
The artifact requires the following libraries:
</p>
<ul>
  <li>JAVA 11+: <a href="https://openjdk.java.net/install/">https://openjdk.java.net/install/</a></li>
  <li>Maude-SE: <a href="https://maude-se.github.io/">https://maude-se.github.io/</a></li>
</ul>
<p>
In the artifact, HybridSynchAADL tool can be exeucted by double clicking 
<code>/hybridsynchaadl/osate</code>. For the workspace, use the directory
<code>/hybridsynchaadl/workspace</code>, which includes a HybridSynchAADL model
<code>PacketDeliverySystem</code>. You also need to set the Maude path: in the top menu, go to
<code>Window =&gt; Preferences =&gt; Maude Preferences</code>, and fill the Maude directory and
executable Maude file.
</p>

<figure>
<img src="../../images/maude_preferences.png" max-width="40%" height="auto" />
<figcaption style="font-size: 14px">Maude Preferences</figcaption>
</figure>

<p><br />
<br /></p>
:ET