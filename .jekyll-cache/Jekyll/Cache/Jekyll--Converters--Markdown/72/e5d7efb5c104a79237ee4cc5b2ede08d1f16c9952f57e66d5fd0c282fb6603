I"Ñ <h1 id="drone-formation-models-with-double-integrator-dynamics">Drone Formation Models with Double-Integrator Dynamics</h1>

<p>This benchmark models represent the formation control of distributed drones
with double-integrator dynamics. Each drone communicates its own position and
velocity sets a proper acceleration. The goal of these models is for all
drones maintains a formation tracing the reference drone without any collision.</p>

<h2 id="download">Download</h2>
<p>You can download the benchmark models: <a href="../Drone_Formation_Double.zip">Drone_Formation_Double.zip</a></p>

<h2 id="top-level-components">Top-Level Components</h2>
<p>We provide six cases of benchmark model: two, three and four drone components
moving in one or two dimensional plane.</p>

<h2 id="architecture">Architecture</h2>
<p><img src="../../images/architecture_formation_double.png" width="80%" height="80%" /></p>

<h2 id="hybridsynchaadl-model-controller-and-environment">HybridSynchAADL Model: Controller and Environment</h2>
<p>Controller.aadl</p>
<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>thread Drone1DControlThread
  features
    currX: in data port Base_Types::Float;
    currVX: in data port Base_Types::Float;
    inX: in data port Base_Types::Float;
    inVX: in data port Base_Types::Float;
    outX : out data port Base_Types::Float;
    outVX: out data port Base_Types::Float;
    accX: out data port Base_Types::Float;
    refX: in data port Base_Types::Float;
    refVX: in data port Base_Types::Float;
  properties
    Dispatch_Protocol =&gt; Periodic;
end Drone1DControlThread;
thread implementation Drone1DControlThread.impl
  subcomponents
    offsetX: data Base_Types::Float;
    refVX0: data Base_Types::Float {Data_Model::Initial_Value =&gt; ("0");};
  annex behavior_specification {**
    variables
      nx, refaX : Base_Types::Float;
    states
      init : initial complete state;
      exec, output : state;
    transitions
      init -[on dispatch]-&gt; exec;
            exec -[abs(currX - inX) &lt; 0.3]-&gt; output{
              accX := -currVX
            };
            exec -[otherwise]-&gt; output {
                 refaX := (refVX - refVX0);
                 nx := refaX - #DroneSpec::alpha * (currX - offsetX - refX + #DroneSpec::gamma * (currVX - refVX))
                      - #DroneSpec::A * (currX - offsetX - inX + #DroneSpec::gamma * (currVX - inVX));
        if (nx &gt; 0.5)    accX := 40
        elsif (nx &gt; 0)    accX := 0
        else        accX := -40
        end if
             };
            output -[ ]-&gt; init {
                outX := currX - offsetX;
                outVX := currVX;
                 refVX0 := refVX
           };
**};
end Drone1DControlThread.impl;

thread Drone2DControlThread extends Drone1DControlThread
  features
    currY: in data port Base_Types::Float;
    currVY: in data port Base_Types::Float;
    inY: in data port Base_Types::Float;
    inVY: in data port Base_Types::Float;
    outY : out data port Base_Types::Float;
    outVY: out data port Base_Types::Float;
    accY: out data port Base_Types::Float;
    refY: in data port Base_Types::Float;
    refVY: in data port Base_Types::Float;
  properties
    Dispatch_Protocol =&gt; Periodic;
    Classifier_Substitution_Rule =&gt; Type_Extension;
end Drone2DControlThread;
thread implementation Drone2DControlThread.impl extends Drone1DControlThread.impl
  subcomponents
    offsetY: data Base_Types::Float;
    refVY0: data Base_Types::Float {Data_Model::Initial_Value =&gt; ("0");};
  annex behavior_specification {**
    variables
      nx, ny, refaX, refaY : Base_Types::Float;
    states
      init : initial complete state;
      exec, output : state;
    transitions
      init -[on dispatch]-&gt; exec;
            exec -[abs(currX - inX) &lt; 0.3 and abs(currY - inY) &lt; 0.3]-&gt; output{
              accX := -currVX; accY := -currVY
            };
            exec -[otherwise]-&gt; output {
                 refaX := (refVX - refVX0);
                 nx := refaX - #DroneSpec::alpha * (currX - offsetX - refX + #DroneSpec::gamma * (currVX - refVX))
                      - #DroneSpec::A * (currX - offsetX - inX + #DroneSpec::gamma * (currVX - inVX));
                 refaY := (refVY - refVY0);
                 ny := refaY - #DroneSpec::alpha * (currY- offsetY - refY + #DroneSpec::gamma * (currVY - refVY))
                      - #DroneSpec::A * (currY - offsetY - inY + #DroneSpec::gamma * (currVY - inVY));
        if (nx &gt; 0.5)    accX := 40
        elsif (nx &gt; 0)    accX := 0
        else        accX := -40
        end if;
        if (ny &gt; 0.5)    accY := 40
        elsif (ny &gt; 0)    accY := 0
        else        accY := -40
        end if
             };
            output -[ ]-&gt; init {
                outX := currX - offsetX;
                outVX := currVX;
                 refVX0 := refVX;
                outY := currY - offsetY;
                outVY := currVY;
                 refVY0 := refVY
           };
**};
end Drone2DControlThread.impl;
</code></pre></div></div>
<p>Environment.aadl</p>
<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>system Environment1D
  features
    currX : out data port Base_Types::Float;
    currVX : out data port Base_Types::Float;
    accX : in data port Base_Types::Float;
  properties
    Hybrid_SynchAADL::isEnvironment =&gt; true;      
end Environment1D;
system implementation Environment1D.impl
  subcomponents
    x : data Base_Types::Float;
    dotx : data Base_Types::Float;
    dotdotx : data Base_Types::Float;
  connections
    C1: port dotx -&gt; currVX;
    C2: port x -&gt; currX;
    C3: port accX -&gt; dotdotx;
  properties
    Hybrid_SynchAADL::ContinuousDynamics =&gt;
        "dotx(t) = ((0.001) * dotdotx * t) + dotx(0); 
               x(t) = (x(0) + (0.001 * dotx(0) * t) + ((0.000001) * dotdotx * t * t) / 2) ; ";
end Environment1D.impl;

system Environment2D extends Environment1D
  features
    currY : out data port Base_Types::Float;
    currVY : out data port Base_Types::Float;
    accY : in data port Base_Types::Float;
  properties
    Hybrid_SynchAADL::isEnvironment =&gt; true;
end Environment2D;
system implementation Environment2D.impl extends Environment1D.impl
  subcomponents
    y : data Base_Types::Float;
    doty : data Base_Types::Float;
    dotdoty : data Base_Types::Float;
  connections
    C4: port doty -&gt; currVY;
    C5: port y -&gt; currY;
    C6: port accY -&gt; dotdoty;
  properties
    Hybrid_SynchAADL::ContinuousDynamics =&gt;
        "dotx(t) = ((0.001) * dotdotx * t) + dotx(0); 
               x(t) = (x(0) + (0.001 * dotx(0) * t) + ((0.000001) * dotdotx * t * t) / 2);
        doty(t) = ((0.001) * dotdoty * t) + doty(0); 
               y(t) = (y(0) + (0.001 * doty(0) * t) + ((0.000001) * dotdoty * t * t) / 2); ";
end Environment2D.impl;
</code></pre></div></div>

<h2 id="safety-requirement">Safety Requirement</h2>

<p>We analyze the safety invariant property where drones do not collide up to
bound 500 ms.</p>

<p>four-2d-inv-false.pspc:</p>
<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>proposition [initial] : abs(drone1.env.x + 0.1) &lt; 0.01 and abs(drone1.env.y + 0.1) &lt; 0.01 and
			abs(drone2.env.x - 0.5) &lt; 0.01 and abs(drone2.env.y - 0.5) &lt; 0.01 and
			abs(drone3.env.x - 1.5) &lt; 0.01 and abs(drone3.env.y - 1.5) &lt; 0.01 and
			abs(drone4.env.x - 2.5) &lt; 0.01 and abs(drone4.env.y - 2.5) &lt; 0.01 and
			abs(refDrone.env.x - 0.3) &lt; 0.01 and abs(refDrone.env.y - 0.3) &lt; 0.01;

proposition [someClose] : (abs(drone1.env.x-drone2.env.x)&lt;0.3 and abs(drone1.env.y-drone2.env.y)&lt;0.3) or
			  (abs(drone1.env.x-drone3.env.x)&lt;0.3 and abs(drone1.env.y-drone3.env.y)&lt;0.3) or
			  (abs(drone1.env.x-drone4.env.x)&lt;0.3 and abs(drone1.env.y-drone4.env.y)&lt;0.3) or
			  (abs(drone2.env.x-drone3.env.x)&lt;0.3 and abs(drone2.env.y-drone3.env.y)&lt;0.3) or
			  (abs(drone2.env.x-drone4.env.x)&lt;0.3 and abs(drone2.env.y-drone4.env.y)&lt;0.3) or
			  (abs(drone3.env.x-drone4.env.x)&lt;0.3 and abs(drone3.env.y-drone4.env.y)&lt;0.3);

invariant [tb_500] : ?initial ==&gt; not(?someClose) in time 500;
</code></pre></div></div>

<h2 id="analysis-results">Analysis Results</h2>
<p><img src="../../images/results_formation_double.png" /></p>

<p><br />
<br /></p>
:ET