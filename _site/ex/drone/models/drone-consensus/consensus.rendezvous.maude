(omod RENDEZVOUS-CONSENSUS is
  including SYSTEM-DYNAMICS .

  --- adjust speed of the current drone according to other drones' speed
  --- newSpeed: speed position MessageSet Offset -> speed
  op newSpeed : Vector Vector Set{Msg} Vector -> Vector .

  var P P' V OFF : Vector .
  var MSG : Msg .
  var MSG' : Set{Msg} .
  var O O' : Oid .

  ceq newSpeed(V, P, MSG', OFF) = (-1) * sum(P, MSG', OFF)
      if MSG' =/= empty .
  eq newSpeed(V, P, empty, P') = V .

  --- sum: currentPosition Pos.Neighbour Offset
  op sum : Vector Set{Msg} Vector -> Vector .

  eq sum(P, empty, OFF) = [0,0,0] .
  eq sum(P, m(O', P', O) ; MSG', OFF) = ((P - P') - OFF) + sum(P, MSG', OFF) .

endom)

(omod RENDEZVOUS-CONSENSUS-BEHAVIOR is
  including RENDEZVOUS-CONSENSUS .
  including SYSTEM .
  including DRONE-RENDEZVOUS .

  var NEIGH : OidSet .
  vars O O' : Oid .
  var T : Time .
  vars V P P' OFF : Vector .
  var MSG : Msg .
  var MSG' : Set{Msg} .
  vars CONF REST : Configuration .

  --- message
  --- assume message delay is always less than the period
  rl [send-read-Msg] : {< O : rendezDrone | speed : V,
                                            position : P,
                                            period : T,
                                            timer : 0,
                                            buffer : MSG',
                                            neighbours : NEIGH,
                                            offset : OFF > REST}
                    => {broadcast(O,P,NEIGH, (1 / 100)) < O : rendezDrone | speed : newSpeed(V, P, MSG', OFF),
                                                                    timer : T,
                                                                    buffer : empty > REST}
                      [print "O=" O " position= " P] .

  rl [receiveMsg] : {dm(m(O,P,O'),0) < O' : Drone | buffer : MSG' > REST}
                    => {< O' : Drone | buffer : (m(O,P,O') ; MSG') > REST} .
endom)
