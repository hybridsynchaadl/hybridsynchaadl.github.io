(omod FORMATION-CONSENSUS is
  including SYSTEM-DYNAMICS .
  including LEADER-DYNAMICS .
  including FOLLOWER-DYNAMICS .

  --- newSpeed: Speed position MessageSet ReferenceDrone Offset -> speed
  op newSpeed : Vector Vector Set{Msg} Oid Vector -> Vector .

  vars P P' V V' RV RP OFF OFF' : Vector .
  var MSG' : Set{Msg} .
  vars O O' RO : Oid .
  var N : Nat .
  vars X Y Z : Rat .
  var MSGCOONT : MsgContent .

  eq newSpeed(V, P, m(RO, < RV ; RP >, O') ; MSG', RO, OFF)
    = (RV - (P - desiredPosition(RP, 2D-angle(unitDir(RV)), OFF))) - refSum(RP, P, OFF, 2D-angle(unitDir(RV)), MSG') .
  ceq newSpeed(V, P, MSG', RO, OFF)
    = (1 / | MSG' | ) * norefSum(P, MSG') if not( m(RO, MSGCOONT, O') in MSG') .
  eq newSpeed(V, P, empty, RO, OFF) = V .

  --- norefSum : currentPosition
  op norefSum : Vector Set{Msg} -> Vector .

  eq norefSum(P, empty) = [0,0,0] .
  eq norefSum(P, m(O, < P' ; OFF' >, O') ; MSG')
    = (V  - (P - OFF) - (P' - OFF'))) + norefSum(P', MSG') .

  --- aux function to calculate speed
  --- refSum : referencePosition currentPosition Offset referenceAngle MessageSet
  op refSum : Vector Vector Vector Nat Set{Msg} -> Vector .

  eq refSum(RP, P, OFF, N, empty) = [0,0,0] .
  eq refSum(RP, P, OFF, N, m(O', < P' ; OFF' >, O) ; MSG')
    = ((P - desiredPosition(RP, N, OFF)) - (P' - desiredPosition(RP, N, OFF'))) + refSum(RP, P, OFF, N, MSG') .

  --- re-calculate desired offset according to Reference position and speed
  --- desiredPosition: referencePosition referenceAngle droneOffset
  op desiredPosition : Vector Nat Vector -> Vector .
  eq desiredPosition(RP, N, [X, Y, Z]) = RP + [(sin(N) * X ) + (cos(N) * Y), (sin(N) * Y) - (cos(N) * X) , Z] .

endom)

(omod FORMATION-CONSENSUS-BEHAVIOR is
  including FORMATION-CONSENSUS .
  including SYSTEM .

  var NEIGH : OidSet .
  vars O O' O'' : Oid .
  var T : Time .
  vars V P P' OFF : Vector .
  var MSG : Msg .
  var MSG' : Set{Msg} .
  vars CONF REST : Configuration .
  var LIST : List{Vector} .

  --- update trajectory of leader
  rl [turnLeader] : {< O : LeaderDrone | speed : V,
                                         position : P,
                                         goal : P LIST > REST}
                    => {< O : LeaderDrone | speed : updateSpeed(V, P, LIST, 2),
                                            position : P,
                                            goal : LIST > REST} .
  *** Message ***

  --- leader only sends messages & update timer
  --- leader drone send its speed and position
  rl [send-Msg] : {< O : LeaderDrone | speed : V,
                                       position : P,
                                       period : T,
                                       timer : 0,
                                       neighbours : NEIGH > REST}
                    => {broadcast(O,< V ; P >,NEIGH, 1/100)
                        < O : LeaderDrone | timer : T > REST}
                      [print "" O " position=" P] .

  --- assume message delay is always less than the period
  --- follwer drones send their current position with offset
  rl [send-read-Msg] : {< O : FollowerDrone | speed : V,
                                              position : P,
                                              period : T,
                                              timer : 0,
                                              buffer : MSG',
                                              neighbours : NEIGH,
                                              formationOffset : OFF,
                                              referenceDrone : O'' > REST}
                    => {broadcast(O,< P ; OFF >,NEIGH, 1/100)
                        < O : FollowerDrone | speed : newSpeed(V, P, MSG', O'', OFF),
                                                      timer : T,
                                                      buffer : empty > REST}
                        [print "" O " position=" P] .


  --- for common drone receive
  rl [receiveMsg] : {dm(m(O,< V ; P >,O'),0) < O' : Drone | buffer : MSG' > REST}
                    => {< O' : Drone | buffer : (m(O,< V ; P >,O') ; MSG') > REST} .

endom)
