
(omod SYSTEM-DYNAMICS is
  protecting DRONE-DYNAMICS .
  protecting DRONE-MSG-DYNAMICS .

  --- System behavior
  op mte : Configuration -> Time .
  op delta : Configuration Time -> Configuration .

  var DELMSG : DelMsg .
  var T : Time .
  vars CONF REST : Configuration .
  var OBJ : Object .
  vars O O' : Oid .
  vars P P' V V' : Vector .
  var MSG : Msg .


  eq mte(DELMSG CONF) = min(mteM(DELMSG), mte(CONF)) .
  eq mte(OBJ CONF) = min(mteD(OBJ), mte(CONF)) .
  eq mte(none) = inf .

  eq delta(DELMSG CONF, T) = deltaM(DELMSG, T) delta(CONF, T) .
  eq delta(OBJ CONF, T) = deltaD(OBJ, T) delta(CONF, T) .
  eq delta(none, T) = none .

  --- collision check
  op Collision? : Configuration Time -> Bool .

  eq Collision?(< O : Drone | speed : V, position : P >
                 < O' : Drone | speed : V', position : P' > REST , T)
                 = (| ((P + (T * V)) - (P' + (T * V'))) |) < (1/1000)
                   [print "collision T = " T] .

endom)

(omod SYSTEM-BEHAVIOR is
  including SYSTEM-DYNAMICS .
  including SYSTEM .

  var T : Time .
  vars CONF : Configuration .

  --- tick rule
  crl [tick] : {CONF}
    => {delta(CONF, T)}
    if T := mte(CONF) /\ T > 0 .

endom)

(omod SYM-STATE-BEHAVIOR is
  including SYSTEM-DYNAMICS .
  including SYM-STATE .
  pr SMT-INTERFACE .
  pr COND-SIMPLIFICATION .

  vars Phi, Phi' : Bool .
  var T : Time .
  vars CONF : Configuration .
  var N N' : Nat .

  --- tick rule
  crl [tick] : {Phi, N, CONF}
    => {Phi', N', delta(CONF, T)}
    if T := mte(CONF)
       /\ T > 0
       /\ Phi' := Phi and v(N) > 0  and T > v(N)
       /\ N' := N + 1
       /\ not(check-sat(tra(Phi and v(N) > 0 and v(N) < T and Collision?(CONF, v(N)))))
       [print "T =" T] .

endom)
