(omod SPEED-CONSENSUS is
  including SYSTEM-DYNAMICS .

  --- consensus on speed
  --- adjust speed of the current drone according to other drones' speed
  --- newSpeed: speed MessageSet -> speed
  op newSpeed : Vector Set{Msg} -> Vector .

  var V V' : Vector .
  var MSG : Msg .
  var MSG' : Set{Msg} .
  var O O' : Oid .

  ceq newSpeed(V, MSG') = (1 / (| MSG' | + 1) ) * (V + sum(MSG'))
      if MSG' =/= empty .
  eq newSpeed(V, empty) = V .

  --- sum
  op sum : Set{Msg} -> Vector .

  eq sum(empty) = [0,0,0] .
  eq sum(m(O, V, O') ; MSG') = V + sum(MSG') .

endom)

(omod REFERENCE-CONSENSUS is
  including SYSTEM-DYNAMICS .
  including LEADER-DYNAMICS .

  --- newSpeed: Speed position MessageSet -> speed
  op newSpeed : Vector Vector Set{Msg} -> Vector .

  vars P P' V : Vector .
  var MSG' : Set{Msg} .
  vars O O' : Oid .

  ceq newSpeed(V, P, MSG') = (1 / | MSG' | ) * refSum(P, MSG')
    if MSG' =/= empty .
  eq newSpeed(V, P, empty) = V .

  --- aux function to calculate speed
  --- refSum : currentPosition MessageSet
  op refSum : Vector Set{Msg} -> Vector .

  eq refSum(P', empty) = [0,0,0] .
  eq refSum(P', m(O, < V ; P >, O') ; MSG') = (V - ((1 / 2) * (P' - P))) + refSum(P', MSG') .

endom)

(omod SPEED-CONSENSUS-BEHAVIOR is
  including SPEED-CONSENSUS .
  including SYSTEM .

  var NEIGH : OidSet .
  vars O O' : Oid .
  vars T : Time .
  vars V P P' : Vector .
  var MSG : Msg .
  var MSG' : Set{Msg} .
  vars CONF REST : Configuration .

  --- message
  --- broadcast
  rl [send-read-Msg] : {< O : Drone | speed : V,
                                      position : P,
                                      period : T,
                                      timer : 0,
                                      buffer : MSG',
                                      neighbours : NEIGH > REST}
                        => {broadcast(O,V,NEIGH, 1) < O : Drone | speed : newSpeed(V, MSG'),
                                                               timer : T,
                                                               buffer : empty > REST} .

  rl [receiveMsg] : {dm(m(O,V,O'),0) < O' : Drone | buffer : MSG' > REST}
                    => {< O' : Drone | buffer : (m(O,V,O') ; MSG') > REST} .
endom)


(omod REFERENCE-CONSENSUS-BEHAVIOR is
  including REFERENCE-CONSENSUS .
  including SYSTEM .

  var NEIGH : OidSet .
  vars O O' : Oid .
  var T : Time .
  vars V P P' : Vector .
  var MSG : Msg .
  var MSG' : Set{Msg} .
  vars CONF REST : Configuration .

  --- message
  --- assume message delay is always less than the period
  rl [send-read-Msg] : {< O : Drone | speed : V,
                                      position : P,
                                      period : T,
                                      timer : 0,
                                      buffer : MSG',
                                      neighbours : NEIGH > REST}
                    => {broadcast(O,< V ; P >,NEIGH, 1) < O : Drone | speed : newSpeed(V, P, MSG'),
                                                              timer : T,
                                                              buffer : empty > REST} .

  rl [receiveMsg] : {dm(m(O,< V ; P >,O'),0) < O' : Drone | buffer : MSG' > REST}
                    => {< O' : Drone | buffer : (m(O,< V ; P >,O') ; MSG') > REST} .
endom)
