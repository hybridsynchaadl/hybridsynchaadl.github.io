fmod VAR is
  including NAT .
  including RAT .

  sort Var .
  subsort Var < Rat .

  op v : Nat -> Var [ctor] .

endfm

fmod RAT-INTERFACE is
  inc RAT .
  inc VAR .

  vars B1 B2 B3 : Bool .
  vars R1 R2 R3 : Rat .
  var N : Nat .

  op tra : Rat -> Rat .
  eq tra(R1 + R2) = tra(R1) + tra(R2) .
  eq tra(R1 * R2) = tra(R1) * tra(R2) .
  eq tra(R1 - R2) = tra(R1) - tra(R2) .

  eq tra(R1 < R2) = tra(R1) < tra(R2) .
  eq tra(R1 > R2) = tra(R1) > tra(R2) .
  eq tra(R1 <= R2) = tra(R1) <= tra(R2) .
  eq tra(R1 >= R2) = tra(R1) >= tra(R2) .
  --- eq tra(R1 / R2) = tra(R1) / tra(R2) .
  eq tra(v(N)) = v(N) .
  eq tra(R1) = @#(R1) .

  op @# : Rat -> Rat .

  op tra : Bool -> Bool .
  eq tra(B1 and B2) = tra(B1) and tra(B2) .
  eq tra(true and B1) = tra(B1) .
  eq tra(false and B1) = false .
  eq tra(B1 and B1) = tra(B1) .
  eq tra(false xor B1) = tra(B1) .
  eq tra(B1 xor B1) = false .
  eq tra(B1 and (B2 xor B3)) = tra(B1) and tra(B2) xor tra(B1) and tra(B3) .
  eq tra(not B1) = tra(B1) xor true .
  eq tra(B1 or B2) = tra(B1) and tra(B2) xor tra(B1) xor tra(B2) .
  eq tra(B1 implies B2) = tra(not(B1 xor B1 and B2)) .
  eq tra(B1) = B1 .

endfm

mod SYM-STATE is
  including CONFIGURATION .
  including BOOL .
  including VAR .
  including RAT-INTERFACE .

  sort SymSys .

  --- State : Constraints VarCounter Configuration
  op {_,_,_} : Bool Nat Configuration -> SymSys .

endm
