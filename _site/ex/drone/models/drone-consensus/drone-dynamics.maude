(omod DRONE-MSG-DYNAMICS is
  protecting DRONE-MSG .

  --- msg dynamics
  op mteM : DelMsg -> Time .
  op deltaM : DelMsg Time -> DelMsg .

  var MSG : Msg .
  vars T T' : Time .

  --- mte for msg
  eq mteM(dm(MSG, T)) = T .
  eq mteM(MSG) = 0 .

  --- delta for msg
  ceq deltaM(dm(MSG, T), T')
    = dm(MSG, T - T') if T >= T' .
  eq deltaM(MSG, 0) = MSG .

  --- broadcast: sender speed neighbours delay
  op broadcast : Oid Vector OidSet Time -> Configuration .

  var NEIGH : OidSet .
  vars N O : Oid .
  var MSGCONT : MsgContent .

  ceq broadcast(O, MSGCONT, N ; NEIGH, T)
    = dm(m(O,MSGCONT,N), T) broadcast(O, MSGCONT, NEIGH, T)
    if N =/= empty .
  eq broadcast(O, MSGCONT, empty, T) = none [owise] .

endom)

(omod DRONE-DYNAMICS is
  including DRONE .

  --- Drone dynamics
  op mteD : Object -> Time .
  op deltaD : Object Time -> Object .

  var O : Oid .
  vars T T' : Time .
  vars V P  : Vector .

  --- mte for drone
  eq mteD(< O : Drone | timer : T >) = T .

  --- delta for drone
  ceq deltaD(< O : Drone | speed : V, position : P, timer : T >, T')
    = < O : Drone | position : P + T' * V, timer : T - T' > if T >= T' .

endom)

(omod LEADER-DYNAMICS is
  including DRONE-LEADER .
  including DRONE-DYNAMICS .

  var O : Oid .
  vars P P1 V : Vector .
  var T : Time .
  var L : List{Vector} .
  var K : Nat .
  vars X1 Y1 Z1 X2 Y2 Z2 : Rat .

  --- updateSpeed : Speed Position goalList step#

  op updateSpeed : Vector Vector List{Vector} Nat -> Vector .

  eq updateSpeed(V, P, P1 L, K) = (K) * unitDir((P1 - P)) .
  eq updateSpeed(V, P, nil, K) = [0,0,0] .

endom)

(omod FOLLOWER-DYNAMICS is
  including DRONE-DYNAMICS .
  including DRONE-FOLLOWER .
endom)
