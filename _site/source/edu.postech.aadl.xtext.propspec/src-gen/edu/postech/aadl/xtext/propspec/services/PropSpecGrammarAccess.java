/*
 * generated by Xtext
 */
package edu.postech.aadl.xtext.propspec.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import java.util.List;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.osate.xtext.aadl2.properties.services.PropertiesGrammarAccess;

@Singleton
public class PropSpecGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class TopElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.postech.aadl.xtext.propspec.PropSpec.Top");
		private final UnorderedGroup cUnorderedGroup = (UnorderedGroup)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cUnorderedGroup.eContents().get(0);
		private final Keyword cNameKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Keyword cColonKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Assignment cNameAssignment_0_2 = (Assignment)cGroup_0.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_0_2_0 = (RuleCall)cNameAssignment_0_2.eContents().get(0);
		private final Keyword cSemicolonKeyword_0_3 = (Keyword)cGroup_0.eContents().get(3);
		private final Group cGroup_1 = (Group)cUnorderedGroup.eContents().get(1);
		private final Keyword cModelKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Keyword cColonKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cModelAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final CrossReference cModelComponentClassifierCrossReference_1_2_0 = (CrossReference)cModelAssignment_1_2.eContents().get(0);
		private final RuleCall cModelComponentClassifierQCREFParserRuleCall_1_2_0_1 = (RuleCall)cModelComponentClassifierCrossReference_1_2_0.eContents().get(1);
		private final Keyword cSemicolonKeyword_1_3 = (Keyword)cGroup_1.eContents().get(3);
		private final Group cGroup_2 = (Group)cUnorderedGroup.eContents().get(2);
		private final Keyword cInstanceKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Keyword cColonKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		private final Assignment cPathAssignment_2_2 = (Assignment)cGroup_2.eContents().get(2);
		private final RuleCall cPathSTRINGTerminalRuleCall_2_2_0 = (RuleCall)cPathAssignment_2_2.eContents().get(0);
		private final Keyword cSemicolonKeyword_2_3 = (Keyword)cGroup_2.eContents().get(3);
		private final Alternatives cAlternatives_3 = (Alternatives)cUnorderedGroup.eContents().get(3);
		private final Assignment cPropositionAssignment_3_0 = (Assignment)cAlternatives_3.eContents().get(0);
		private final RuleCall cPropositionPropositionParserRuleCall_3_0_0 = (RuleCall)cPropositionAssignment_3_0.eContents().get(0);
		private final Assignment cPropertyAssignment_3_1 = (Assignment)cAlternatives_3.eContents().get(1);
		private final RuleCall cPropertyPropertyParserRuleCall_3_1_0 = (RuleCall)cPropertyAssignment_3_1.eContents().get(0);
		
		//Top:
		//	'name' ':' name=ID ';' & 'model' ':' model=[aadl2::ComponentClassifier|QCREF] ';' & 'instance' ':' path=STRING ';' &
		//	(proposition+=Proposition | property+=Property)*;
		@Override public ParserRule getRule() { return rule; }

		//'name' ':' name=ID ';' & 'model' ':' model=[aadl2::ComponentClassifier|QCREF] ';' & 'instance' ':' path=STRING ';' &
		//(proposition+=Proposition | property+=Property)*
		public UnorderedGroup getUnorderedGroup() { return cUnorderedGroup; }

		//'name' ':' name=ID ';'
		public Group getGroup_0() { return cGroup_0; }

		//'name'
		public Keyword getNameKeyword_0_0() { return cNameKeyword_0_0; }

		//':'
		public Keyword getColonKeyword_0_1() { return cColonKeyword_0_1; }

		//name=ID
		public Assignment getNameAssignment_0_2() { return cNameAssignment_0_2; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_0_2_0() { return cNameIDTerminalRuleCall_0_2_0; }

		//';'
		public Keyword getSemicolonKeyword_0_3() { return cSemicolonKeyword_0_3; }

		//'model' ':' model=[aadl2::ComponentClassifier|QCREF] ';'
		public Group getGroup_1() { return cGroup_1; }

		//'model'
		public Keyword getModelKeyword_1_0() { return cModelKeyword_1_0; }

		//':'
		public Keyword getColonKeyword_1_1() { return cColonKeyword_1_1; }

		//model=[aadl2::ComponentClassifier|QCREF]
		public Assignment getModelAssignment_1_2() { return cModelAssignment_1_2; }

		//[aadl2::ComponentClassifier|QCREF]
		public CrossReference getModelComponentClassifierCrossReference_1_2_0() { return cModelComponentClassifierCrossReference_1_2_0; }

		//QCREF
		public RuleCall getModelComponentClassifierQCREFParserRuleCall_1_2_0_1() { return cModelComponentClassifierQCREFParserRuleCall_1_2_0_1; }

		//';'
		public Keyword getSemicolonKeyword_1_3() { return cSemicolonKeyword_1_3; }

		//'instance' ':' path=STRING ';'
		public Group getGroup_2() { return cGroup_2; }

		//'instance'
		public Keyword getInstanceKeyword_2_0() { return cInstanceKeyword_2_0; }

		//':'
		public Keyword getColonKeyword_2_1() { return cColonKeyword_2_1; }

		//path=STRING
		public Assignment getPathAssignment_2_2() { return cPathAssignment_2_2; }

		//STRING
		public RuleCall getPathSTRINGTerminalRuleCall_2_2_0() { return cPathSTRINGTerminalRuleCall_2_2_0; }

		//';'
		public Keyword getSemicolonKeyword_2_3() { return cSemicolonKeyword_2_3; }

		//(proposition+=Proposition | property+=Property)*
		public Alternatives getAlternatives_3() { return cAlternatives_3; }

		//proposition+=Proposition
		public Assignment getPropositionAssignment_3_0() { return cPropositionAssignment_3_0; }

		//Proposition
		public RuleCall getPropositionPropositionParserRuleCall_3_0_0() { return cPropositionPropositionParserRuleCall_3_0_0; }

		//property+=Property
		public Assignment getPropertyAssignment_3_1() { return cPropertyAssignment_3_1; }

		//Property
		public RuleCall getPropertyPropertyParserRuleCall_3_1_0() { return cPropertyPropertyParserRuleCall_3_1_0; }
	}

	public class PropertyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.postech.aadl.xtext.propspec.PropSpec.Property");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cReachabilityParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cInvariantParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Property:
		//	Reachability | Invariant;
		@Override public ParserRule getRule() { return rule; }

		//Reachability | Invariant
		public Alternatives getAlternatives() { return cAlternatives; }

		//Reachability
		public RuleCall getReachabilityParserRuleCall_0() { return cReachabilityParserRuleCall_0; }

		//Invariant
		public RuleCall getInvariantParserRuleCall_1() { return cInvariantParserRuleCall_1; }
	}

	public class ReachabilityElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.postech.aadl.xtext.propspec.PropSpec.Reachability");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cReachabilityKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftSquareBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cColonKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Assignment cInitCondAssignment_5_0 = (Assignment)cGroup_5.eContents().get(0);
		private final RuleCall cInitCondPSExpressionParserRuleCall_5_0_0 = (RuleCall)cInitCondAssignment_5_0.eContents().get(0);
		private final Keyword cEqualsSignEqualsSignGreaterThanSignKeyword_5_1 = (Keyword)cGroup_5.eContents().get(1);
		private final Assignment cGoalCondAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cGoalCondPSExpressionParserRuleCall_6_0 = (RuleCall)cGoalCondAssignment_6.eContents().get(0);
		private final Keyword cInKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Keyword cTimeKeyword_8 = (Keyword)cGroup.eContents().get(8);
		private final Assignment cBoundAssignment_9 = (Assignment)cGroup.eContents().get(9);
		private final RuleCall cBoundINTVALUEParserRuleCall_9_0 = (RuleCall)cBoundAssignment_9.eContents().get(0);
		private final Keyword cSemicolonKeyword_10 = (Keyword)cGroup.eContents().get(10);
		
		//Reachability:
		//	'reachability' '[' name=ID ']' ':' (initCond=PSExpression '==>')? goalCond=PSExpression 'in' 'time' bound=INTVALUE
		//	';';
		@Override public ParserRule getRule() { return rule; }

		//'reachability' '[' name=ID ']' ':' (initCond=PSExpression '==>')? goalCond=PSExpression 'in' 'time' bound=INTVALUE ';'
		public Group getGroup() { return cGroup; }

		//'reachability'
		public Keyword getReachabilityKeyword_0() { return cReachabilityKeyword_0; }

		//'['
		public Keyword getLeftSquareBracketKeyword_1() { return cLeftSquareBracketKeyword_1; }

		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }

		//']'
		public Keyword getRightSquareBracketKeyword_3() { return cRightSquareBracketKeyword_3; }

		//':'
		public Keyword getColonKeyword_4() { return cColonKeyword_4; }

		//(initCond=PSExpression '==>')?
		public Group getGroup_5() { return cGroup_5; }

		//initCond=PSExpression
		public Assignment getInitCondAssignment_5_0() { return cInitCondAssignment_5_0; }

		//PSExpression
		public RuleCall getInitCondPSExpressionParserRuleCall_5_0_0() { return cInitCondPSExpressionParserRuleCall_5_0_0; }

		//'==>'
		public Keyword getEqualsSignEqualsSignGreaterThanSignKeyword_5_1() { return cEqualsSignEqualsSignGreaterThanSignKeyword_5_1; }

		//goalCond=PSExpression
		public Assignment getGoalCondAssignment_6() { return cGoalCondAssignment_6; }

		//PSExpression
		public RuleCall getGoalCondPSExpressionParserRuleCall_6_0() { return cGoalCondPSExpressionParserRuleCall_6_0; }

		//'in'
		public Keyword getInKeyword_7() { return cInKeyword_7; }

		//'time'
		public Keyword getTimeKeyword_8() { return cTimeKeyword_8; }

		//bound=INTVALUE
		public Assignment getBoundAssignment_9() { return cBoundAssignment_9; }

		//INTVALUE
		public RuleCall getBoundINTVALUEParserRuleCall_9_0() { return cBoundINTVALUEParserRuleCall_9_0; }

		//';'
		public Keyword getSemicolonKeyword_10() { return cSemicolonKeyword_10; }
	}

	public class InvariantElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.postech.aadl.xtext.propspec.PropSpec.Invariant");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cInvariantKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftSquareBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cColonKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Assignment cInitCondAssignment_5_0 = (Assignment)cGroup_5.eContents().get(0);
		private final RuleCall cInitCondPSExpressionParserRuleCall_5_0_0 = (RuleCall)cInitCondAssignment_5_0.eContents().get(0);
		private final Keyword cEqualsSignEqualsSignGreaterThanSignKeyword_5_1 = (Keyword)cGroup_5.eContents().get(1);
		private final Assignment cGoalCondAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cGoalCondPSExpressionParserRuleCall_6_0 = (RuleCall)cGoalCondAssignment_6.eContents().get(0);
		private final Keyword cInKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Keyword cTimeKeyword_8 = (Keyword)cGroup.eContents().get(8);
		private final Assignment cBoundAssignment_9 = (Assignment)cGroup.eContents().get(9);
		private final RuleCall cBoundINTVALUEParserRuleCall_9_0 = (RuleCall)cBoundAssignment_9.eContents().get(0);
		private final Keyword cSemicolonKeyword_10 = (Keyword)cGroup.eContents().get(10);
		
		//Invariant:
		//	'invariant' '[' name=ID ']' ':' (initCond=PSExpression '==>')? goalCond=PSExpression 'in' 'time' bound=INTVALUE ';';
		@Override public ParserRule getRule() { return rule; }

		//'invariant' '[' name=ID ']' ':' (initCond=PSExpression '==>')? goalCond=PSExpression 'in' 'time' bound=INTVALUE ';'
		public Group getGroup() { return cGroup; }

		//'invariant'
		public Keyword getInvariantKeyword_0() { return cInvariantKeyword_0; }

		//'['
		public Keyword getLeftSquareBracketKeyword_1() { return cLeftSquareBracketKeyword_1; }

		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }

		//']'
		public Keyword getRightSquareBracketKeyword_3() { return cRightSquareBracketKeyword_3; }

		//':'
		public Keyword getColonKeyword_4() { return cColonKeyword_4; }

		//(initCond=PSExpression '==>')?
		public Group getGroup_5() { return cGroup_5; }

		//initCond=PSExpression
		public Assignment getInitCondAssignment_5_0() { return cInitCondAssignment_5_0; }

		//PSExpression
		public RuleCall getInitCondPSExpressionParserRuleCall_5_0_0() { return cInitCondPSExpressionParserRuleCall_5_0_0; }

		//'==>'
		public Keyword getEqualsSignEqualsSignGreaterThanSignKeyword_5_1() { return cEqualsSignEqualsSignGreaterThanSignKeyword_5_1; }

		//goalCond=PSExpression
		public Assignment getGoalCondAssignment_6() { return cGoalCondAssignment_6; }

		//PSExpression
		public RuleCall getGoalCondPSExpressionParserRuleCall_6_0() { return cGoalCondPSExpressionParserRuleCall_6_0; }

		//'in'
		public Keyword getInKeyword_7() { return cInKeyword_7; }

		//'time'
		public Keyword getTimeKeyword_8() { return cTimeKeyword_8; }

		//bound=INTVALUE
		public Assignment getBoundAssignment_9() { return cBoundAssignment_9; }

		//INTVALUE
		public RuleCall getBoundINTVALUEParserRuleCall_9_0() { return cBoundINTVALUEParserRuleCall_9_0; }

		//';'
		public Keyword getSemicolonKeyword_10() { return cSemicolonKeyword_10; }
	}

	public class PropositionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.postech.aadl.xtext.propspec.PropSpec.Proposition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPropositionKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftSquareBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cColonKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cExpressionAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cExpressionPSExpressionParserRuleCall_5_0 = (RuleCall)cExpressionAssignment_5.eContents().get(0);
		private final Keyword cSemicolonKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//Proposition:
		//	'proposition' '[' name=ID ']' ':' expression=PSExpression ';';
		@Override public ParserRule getRule() { return rule; }

		//'proposition' '[' name=ID ']' ':' expression=PSExpression ';'
		public Group getGroup() { return cGroup; }

		//'proposition'
		public Keyword getPropositionKeyword_0() { return cPropositionKeyword_0; }

		//'['
		public Keyword getLeftSquareBracketKeyword_1() { return cLeftSquareBracketKeyword_1; }

		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }

		//']'
		public Keyword getRightSquareBracketKeyword_3() { return cRightSquareBracketKeyword_3; }

		//':'
		public Keyword getColonKeyword_4() { return cColonKeyword_4; }

		//expression=PSExpression
		public Assignment getExpressionAssignment_5() { return cExpressionAssignment_5; }

		//PSExpression
		public RuleCall getExpressionPSExpressionParserRuleCall_5_0() { return cExpressionPSExpressionParserRuleCall_5_0; }

		//';'
		public Keyword getSemicolonKeyword_6() { return cSemicolonKeyword_6; }
	}

	public class ModeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.postech.aadl.xtext.propspec.PropSpec.Mode");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSYMBOLICParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cRANDOMParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		///*
		// * Mode declaration (for internal use)
		// */ Mode:
		//	SYMBOLIC | RANDOM;
		@Override public ParserRule getRule() { return rule; }

		//SYMBOLIC | RANDOM
		public Alternatives getAlternatives() { return cAlternatives; }

		//SYMBOLIC
		public RuleCall getSYMBOLICParserRuleCall_0() { return cSYMBOLICParserRuleCall_0; }

		//RANDOM
		public RuleCall getRANDOMParserRuleCall_1() { return cRANDOMParserRuleCall_1; }
	}

	public class SYMBOLICElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.postech.aadl.xtext.propspec.PropSpec.SYMBOLIC");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final Keyword cNameSymbolicKeyword_0 = (Keyword)cNameAssignment.eContents().get(0);
		
		//SYMBOLIC:
		//	name="symbolic";
		@Override public ParserRule getRule() { return rule; }

		//name="symbolic"
		public Assignment getNameAssignment() { return cNameAssignment; }

		//"symbolic"
		public Keyword getNameSymbolicKeyword_0() { return cNameSymbolicKeyword_0; }
	}

	public class RANDOMElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.postech.aadl.xtext.propspec.PropSpec.RANDOM");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cNameRandomKeyword_0_0 = (Keyword)cNameAssignment_0.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cSeedAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cSeedINTVALUEParserRuleCall_2_0 = (RuleCall)cSeedAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//RANDOM:
		//	name="random" '(' seed=INTVALUE ')';
		@Override public ParserRule getRule() { return rule; }

		//name="random" '(' seed=INTVALUE ')'
		public Group getGroup() { return cGroup; }

		//name="random"
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//"random"
		public Keyword getNameRandomKeyword_0_0() { return cNameRandomKeyword_0_0; }

		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }

		//seed=INTVALUE
		public Assignment getSeedAssignment_2() { return cSeedAssignment_2; }

		//INTVALUE
		public RuleCall getSeedINTVALUEParserRuleCall_2_0() { return cSeedINTVALUEParserRuleCall_2_0; }

		//')'
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}

	public class PSExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.postech.aadl.xtext.propspec.PropSpec.PSExpression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final RuleCall cScopedExpressionParserRuleCall_0_0 = (RuleCall)cGroup_0.eContents().get(0);
		private final Group cGroup_0_1 = (Group)cGroup_0.eContents().get(1);
		private final Action cBinaryExpressionLeftAction_0_1_0 = (Action)cGroup_0_1.eContents().get(0);
		private final Assignment cOpAssignment_0_1_1 = (Assignment)cGroup_0_1.eContents().get(1);
		private final Alternatives cOpAlternatives_0_1_1_0 = (Alternatives)cOpAssignment_0_1_1.eContents().get(0);
		private final Keyword cOpAndKeyword_0_1_1_0_0 = (Keyword)cOpAlternatives_0_1_1_0.eContents().get(0);
		private final Keyword cOpOrKeyword_0_1_1_0_1 = (Keyword)cOpAlternatives_0_1_1_0.eContents().get(1);
		private final Keyword cOpXorKeyword_0_1_1_0_2 = (Keyword)cOpAlternatives_0_1_1_0.eContents().get(2);
		private final Assignment cRightAssignment_0_1_2 = (Assignment)cGroup_0_1.eContents().get(2);
		private final RuleCall cRightPSExpressionParserRuleCall_0_1_2_0 = (RuleCall)cRightAssignment_0_1_2.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final RuleCall cRelationParserRuleCall_1_0 = (RuleCall)cGroup_1.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cGroup_1.eContents().get(1);
		private final Action cBinaryExpressionLeftAction_1_1_0 = (Action)cGroup_1_1.eContents().get(0);
		private final Assignment cOpAssignment_1_1_1 = (Assignment)cGroup_1_1.eContents().get(1);
		private final Alternatives cOpAlternatives_1_1_1_0 = (Alternatives)cOpAssignment_1_1_1.eContents().get(0);
		private final Keyword cOpAndKeyword_1_1_1_0_0 = (Keyword)cOpAlternatives_1_1_1_0.eContents().get(0);
		private final Keyword cOpOrKeyword_1_1_1_0_1 = (Keyword)cOpAlternatives_1_1_1_0.eContents().get(1);
		private final Keyword cOpXorKeyword_1_1_1_0_2 = (Keyword)cOpAlternatives_1_1_1_0.eContents().get(2);
		private final Assignment cRightAssignment_1_1_2 = (Assignment)cGroup_1_1.eContents().get(2);
		private final RuleCall cRightRelationParserRuleCall_1_1_2_0 = (RuleCall)cRightAssignment_1_1_2.eContents().get(0);
		
		///* 
		// * Maude proposition language syntax
		// */ /*
		// * A subset of the behavior expression language
		// */ PSExpression:
		//	ScopedExpression ({BinaryExpression.left=current} op=('and' | 'or' | 'xor') right=PSExpression)*
		//	| Relation ({BinaryExpression.left=current} op=('and' | 'or' | 'xor') right=Relation)*;
		@Override public ParserRule getRule() { return rule; }

		//ScopedExpression ({BinaryExpression.left=current} op=('and' | 'or' | 'xor') right=PSExpression)* | Relation
		//({BinaryExpression.left=current} op=('and' | 'or' | 'xor') right=Relation)*
		public Alternatives getAlternatives() { return cAlternatives; }

		//ScopedExpression ({BinaryExpression.left=current} op=('and' | 'or' | 'xor') right=PSExpression)*
		public Group getGroup_0() { return cGroup_0; }

		//ScopedExpression
		public RuleCall getScopedExpressionParserRuleCall_0_0() { return cScopedExpressionParserRuleCall_0_0; }

		//({BinaryExpression.left=current} op=('and' | 'or' | 'xor') right=PSExpression)*
		public Group getGroup_0_1() { return cGroup_0_1; }

		//{BinaryExpression.left=current}
		public Action getBinaryExpressionLeftAction_0_1_0() { return cBinaryExpressionLeftAction_0_1_0; }

		//op=('and' | 'or' | 'xor')
		public Assignment getOpAssignment_0_1_1() { return cOpAssignment_0_1_1; }

		//('and' | 'or' | 'xor')
		public Alternatives getOpAlternatives_0_1_1_0() { return cOpAlternatives_0_1_1_0; }

		//'and'
		public Keyword getOpAndKeyword_0_1_1_0_0() { return cOpAndKeyword_0_1_1_0_0; }

		//'or'
		public Keyword getOpOrKeyword_0_1_1_0_1() { return cOpOrKeyword_0_1_1_0_1; }

		//'xor'
		public Keyword getOpXorKeyword_0_1_1_0_2() { return cOpXorKeyword_0_1_1_0_2; }

		//right=PSExpression
		public Assignment getRightAssignment_0_1_2() { return cRightAssignment_0_1_2; }

		//PSExpression
		public RuleCall getRightPSExpressionParserRuleCall_0_1_2_0() { return cRightPSExpressionParserRuleCall_0_1_2_0; }

		//Relation ({BinaryExpression.left=current} op=('and' | 'or' | 'xor') right=Relation)*
		public Group getGroup_1() { return cGroup_1; }

		//Relation
		public RuleCall getRelationParserRuleCall_1_0() { return cRelationParserRuleCall_1_0; }

		//({BinaryExpression.left=current} op=('and' | 'or' | 'xor') right=Relation)*
		public Group getGroup_1_1() { return cGroup_1_1; }

		//{BinaryExpression.left=current}
		public Action getBinaryExpressionLeftAction_1_1_0() { return cBinaryExpressionLeftAction_1_1_0; }

		//op=('and' | 'or' | 'xor')
		public Assignment getOpAssignment_1_1_1() { return cOpAssignment_1_1_1; }

		//('and' | 'or' | 'xor')
		public Alternatives getOpAlternatives_1_1_1_0() { return cOpAlternatives_1_1_1_0; }

		//'and'
		public Keyword getOpAndKeyword_1_1_1_0_0() { return cOpAndKeyword_1_1_1_0_0; }

		//'or'
		public Keyword getOpOrKeyword_1_1_1_0_1() { return cOpOrKeyword_1_1_1_0_1; }

		//'xor'
		public Keyword getOpXorKeyword_1_1_1_0_2() { return cOpXorKeyword_1_1_1_0_2; }

		//right=Relation
		public Assignment getRightAssignment_1_1_2() { return cRightAssignment_1_1_2; }

		//Relation
		public RuleCall getRightRelationParserRuleCall_1_1_2_0() { return cRightRelationParserRuleCall_1_1_2_0; }
	}

	public class RelationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.postech.aadl.xtext.propspec.PropSpec.Relation");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final RuleCall cModifiedExpressionParserRuleCall_0_0 = (RuleCall)cGroup_0.eContents().get(0);
		private final Group cGroup_0_1 = (Group)cGroup_0.eContents().get(1);
		private final Action cBinaryExpressionLeftAction_0_1_0 = (Action)cGroup_0_1.eContents().get(0);
		private final Assignment cOpAssignment_0_1_1 = (Assignment)cGroup_0_1.eContents().get(1);
		private final Alternatives cOpAlternatives_0_1_1_0 = (Alternatives)cOpAssignment_0_1_1.eContents().get(0);
		private final Keyword cOpEqualsSignKeyword_0_1_1_0_0 = (Keyword)cOpAlternatives_0_1_1_0.eContents().get(0);
		private final Keyword cOpExclamationMarkEqualsSignKeyword_0_1_1_0_1 = (Keyword)cOpAlternatives_0_1_1_0.eContents().get(1);
		private final Keyword cOpLessThanSignKeyword_0_1_1_0_2 = (Keyword)cOpAlternatives_0_1_1_0.eContents().get(2);
		private final Keyword cOpLessThanSignEqualsSignKeyword_0_1_1_0_3 = (Keyword)cOpAlternatives_0_1_1_0.eContents().get(3);
		private final Keyword cOpGreaterThanSignKeyword_0_1_1_0_4 = (Keyword)cOpAlternatives_0_1_1_0.eContents().get(4);
		private final Keyword cOpGreaterThanSignEqualsSignKeyword_0_1_1_0_5 = (Keyword)cOpAlternatives_0_1_1_0.eContents().get(5);
		private final Assignment cRightAssignment_0_1_2 = (Assignment)cGroup_0_1.eContents().get(2);
		private final RuleCall cRightModifiedExpressionParserRuleCall_0_1_2_0 = (RuleCall)cRightAssignment_0_1_2.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cQuestionMarkKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cPropRefParserRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		//Relation PSExpression:
		//	ModifiedExpression ({BinaryExpression.left=current} op=('=' | '!=' | '<' | '<=' | '>' | '>=')
		//	right=ModifiedExpression)?
		//	| '?' PropRef;
		@Override public ParserRule getRule() { return rule; }

		//ModifiedExpression ({BinaryExpression.left=current} op=('=' | '!=' | '<' | '<=' | '>' | '>=') right=ModifiedExpression)?
		//| '?' PropRef
		public Alternatives getAlternatives() { return cAlternatives; }

		//ModifiedExpression ({BinaryExpression.left=current} op=('=' | '!=' | '<' | '<=' | '>' | '>=') right=ModifiedExpression)?
		public Group getGroup_0() { return cGroup_0; }

		//ModifiedExpression
		public RuleCall getModifiedExpressionParserRuleCall_0_0() { return cModifiedExpressionParserRuleCall_0_0; }

		//({BinaryExpression.left=current} op=('=' | '!=' | '<' | '<=' | '>' | '>=') right=ModifiedExpression)?
		public Group getGroup_0_1() { return cGroup_0_1; }

		//{BinaryExpression.left=current}
		public Action getBinaryExpressionLeftAction_0_1_0() { return cBinaryExpressionLeftAction_0_1_0; }

		//op=('=' | '!=' | '<' | '<=' | '>' | '>=')
		public Assignment getOpAssignment_0_1_1() { return cOpAssignment_0_1_1; }

		//('=' | '!=' | '<' | '<=' | '>' | '>=')
		public Alternatives getOpAlternatives_0_1_1_0() { return cOpAlternatives_0_1_1_0; }

		//'='
		public Keyword getOpEqualsSignKeyword_0_1_1_0_0() { return cOpEqualsSignKeyword_0_1_1_0_0; }

		//'!='
		public Keyword getOpExclamationMarkEqualsSignKeyword_0_1_1_0_1() { return cOpExclamationMarkEqualsSignKeyword_0_1_1_0_1; }

		//'<'
		public Keyword getOpLessThanSignKeyword_0_1_1_0_2() { return cOpLessThanSignKeyword_0_1_1_0_2; }

		//'<='
		public Keyword getOpLessThanSignEqualsSignKeyword_0_1_1_0_3() { return cOpLessThanSignEqualsSignKeyword_0_1_1_0_3; }

		//'>'
		public Keyword getOpGreaterThanSignKeyword_0_1_1_0_4() { return cOpGreaterThanSignKeyword_0_1_1_0_4; }

		//'>='
		public Keyword getOpGreaterThanSignEqualsSignKeyword_0_1_1_0_5() { return cOpGreaterThanSignEqualsSignKeyword_0_1_1_0_5; }

		//right=ModifiedExpression
		public Assignment getRightAssignment_0_1_2() { return cRightAssignment_0_1_2; }

		//ModifiedExpression
		public RuleCall getRightModifiedExpressionParserRuleCall_0_1_2_0() { return cRightModifiedExpressionParserRuleCall_0_1_2_0; }

		//'?' PropRef
		public Group getGroup_1() { return cGroup_1; }

		//'?'
		public Keyword getQuestionMarkKeyword_1_0() { return cQuestionMarkKeyword_1_0; }

		//PropRef
		public RuleCall getPropRefParserRuleCall_1_1() { return cPropRefParserRuleCall_1_1; }
	}

	public class ModifiedExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.postech.aadl.xtext.propspec.PropSpec.ModifiedExpression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSimpleExpressionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cUnaryExpressionAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOpAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final Alternatives cOpAlternatives_1_1_0 = (Alternatives)cOpAssignment_1_1.eContents().get(0);
		private final Keyword cOpPlusSignKeyword_1_1_0_0 = (Keyword)cOpAlternatives_1_1_0.eContents().get(0);
		private final Keyword cOpHyphenMinusKeyword_1_1_0_1 = (Keyword)cOpAlternatives_1_1_0.eContents().get(1);
		private final Assignment cChildAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cChildSimpleExpressionParserRuleCall_1_2_0 = (RuleCall)cChildAssignment_1_2.eContents().get(0);
		
		//ModifiedExpression PSExpression:
		//	SimpleExpression
		//	| {UnaryExpression} op=('+' | '-') child=SimpleExpression;
		@Override public ParserRule getRule() { return rule; }

		//SimpleExpression | {UnaryExpression} op=('+' | '-') child=SimpleExpression
		public Alternatives getAlternatives() { return cAlternatives; }

		//SimpleExpression
		public RuleCall getSimpleExpressionParserRuleCall_0() { return cSimpleExpressionParserRuleCall_0; }

		//{UnaryExpression} op=('+' | '-') child=SimpleExpression
		public Group getGroup_1() { return cGroup_1; }

		//{UnaryExpression}
		public Action getUnaryExpressionAction_1_0() { return cUnaryExpressionAction_1_0; }

		//op=('+' | '-')
		public Assignment getOpAssignment_1_1() { return cOpAssignment_1_1; }

		//('+' | '-')
		public Alternatives getOpAlternatives_1_1_0() { return cOpAlternatives_1_1_0; }

		//'+'
		public Keyword getOpPlusSignKeyword_1_1_0_0() { return cOpPlusSignKeyword_1_1_0_0; }

		//'-'
		public Keyword getOpHyphenMinusKeyword_1_1_0_1() { return cOpHyphenMinusKeyword_1_1_0_1; }

		//child=SimpleExpression
		public Assignment getChildAssignment_1_2() { return cChildAssignment_1_2; }

		//SimpleExpression
		public RuleCall getChildSimpleExpressionParserRuleCall_1_2_0() { return cChildSimpleExpressionParserRuleCall_1_2_0; }
	}

	public class SimpleExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.postech.aadl.xtext.propspec.PropSpec.SimpleExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cTermParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cBinaryExpressionLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOpAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final Alternatives cOpAlternatives_1_1_0 = (Alternatives)cOpAssignment_1_1.eContents().get(0);
		private final Keyword cOpPlusSignKeyword_1_1_0_0 = (Keyword)cOpAlternatives_1_1_0.eContents().get(0);
		private final Keyword cOpHyphenMinusKeyword_1_1_0_1 = (Keyword)cOpAlternatives_1_1_0.eContents().get(1);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightTermParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//SimpleExpression PSExpression:
		//	Term ({BinaryExpression.left=current} op=('+' | '-') right=Term)*;
		@Override public ParserRule getRule() { return rule; }

		//Term ({BinaryExpression.left=current} op=('+' | '-') right=Term)*
		public Group getGroup() { return cGroup; }

		//Term
		public RuleCall getTermParserRuleCall_0() { return cTermParserRuleCall_0; }

		//({BinaryExpression.left=current} op=('+' | '-') right=Term)*
		public Group getGroup_1() { return cGroup_1; }

		//{BinaryExpression.left=current}
		public Action getBinaryExpressionLeftAction_1_0() { return cBinaryExpressionLeftAction_1_0; }

		//op=('+' | '-')
		public Assignment getOpAssignment_1_1() { return cOpAssignment_1_1; }

		//('+' | '-')
		public Alternatives getOpAlternatives_1_1_0() { return cOpAlternatives_1_1_0; }

		//'+'
		public Keyword getOpPlusSignKeyword_1_1_0_0() { return cOpPlusSignKeyword_1_1_0_0; }

		//'-'
		public Keyword getOpHyphenMinusKeyword_1_1_0_1() { return cOpHyphenMinusKeyword_1_1_0_1; }

		//right=Term
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }

		//Term
		public RuleCall getRightTermParserRuleCall_1_2_0() { return cRightTermParserRuleCall_1_2_0; }
	}

	public class TermElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.postech.aadl.xtext.propspec.PropSpec.Term");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final RuleCall cValueParserRuleCall_0_0 = (RuleCall)cGroup_0.eContents().get(0);
		private final Group cGroup_0_1 = (Group)cGroup_0.eContents().get(1);
		private final Action cBinaryExpressionLeftAction_0_1_0 = (Action)cGroup_0_1.eContents().get(0);
		private final Assignment cOpAssignment_0_1_1 = (Assignment)cGroup_0_1.eContents().get(1);
		private final Alternatives cOpAlternatives_0_1_1_0 = (Alternatives)cOpAssignment_0_1_1.eContents().get(0);
		private final Keyword cOpAsteriskKeyword_0_1_1_0_0 = (Keyword)cOpAlternatives_0_1_1_0.eContents().get(0);
		private final Keyword cOpSolidusKeyword_0_1_1_0_1 = (Keyword)cOpAlternatives_0_1_1_0.eContents().get(1);
		private final Assignment cRightAssignment_0_1_2 = (Assignment)cGroup_0_1.eContents().get(2);
		private final RuleCall cRightValueParserRuleCall_0_1_2_0 = (RuleCall)cRightAssignment_0_1_2.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cUnaryExpressionAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOpAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final Alternatives cOpAlternatives_1_1_0 = (Alternatives)cOpAssignment_1_1.eContents().get(0);
		private final Keyword cOpAbsKeyword_1_1_0_0 = (Keyword)cOpAlternatives_1_1_0.eContents().get(0);
		private final Keyword cOpNotKeyword_1_1_0_1 = (Keyword)cOpAlternatives_1_1_0.eContents().get(1);
		private final Assignment cChildAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cChildValueParserRuleCall_1_2_0 = (RuleCall)cChildAssignment_1_2.eContents().get(0);
		
		//Term PSExpression:
		//	Value ({BinaryExpression.left=current} op=('*' | '/') right=Value)*
		//	| {UnaryExpression} op=('abs' | 'not') child=Value;
		@Override public ParserRule getRule() { return rule; }

		//Value ({BinaryExpression.left=current} op=('*' | '/') right=Value)* | {UnaryExpression} op=('abs' | 'not') child=Value
		public Alternatives getAlternatives() { return cAlternatives; }

		//Value ({BinaryExpression.left=current} op=('*' | '/') right=Value)*
		public Group getGroup_0() { return cGroup_0; }

		//Value
		public RuleCall getValueParserRuleCall_0_0() { return cValueParserRuleCall_0_0; }

		//({BinaryExpression.left=current} op=('*' | '/') right=Value)*
		public Group getGroup_0_1() { return cGroup_0_1; }

		//{BinaryExpression.left=current}
		public Action getBinaryExpressionLeftAction_0_1_0() { return cBinaryExpressionLeftAction_0_1_0; }

		//op=('*' | '/')
		public Assignment getOpAssignment_0_1_1() { return cOpAssignment_0_1_1; }

		//('*' | '/')
		public Alternatives getOpAlternatives_0_1_1_0() { return cOpAlternatives_0_1_1_0; }

		//'*'
		public Keyword getOpAsteriskKeyword_0_1_1_0_0() { return cOpAsteriskKeyword_0_1_1_0_0; }

		//'/'
		public Keyword getOpSolidusKeyword_0_1_1_0_1() { return cOpSolidusKeyword_0_1_1_0_1; }

		//right=Value
		public Assignment getRightAssignment_0_1_2() { return cRightAssignment_0_1_2; }

		//Value
		public RuleCall getRightValueParserRuleCall_0_1_2_0() { return cRightValueParserRuleCall_0_1_2_0; }

		//{UnaryExpression} op=('abs' | 'not') child=Value
		public Group getGroup_1() { return cGroup_1; }

		//{UnaryExpression}
		public Action getUnaryExpressionAction_1_0() { return cUnaryExpressionAction_1_0; }

		//op=('abs' | 'not')
		public Assignment getOpAssignment_1_1() { return cOpAssignment_1_1; }

		//('abs' | 'not')
		public Alternatives getOpAlternatives_1_1_0() { return cOpAlternatives_1_1_0; }

		//'abs'
		public Keyword getOpAbsKeyword_1_1_0_0() { return cOpAbsKeyword_1_1_0_0; }

		//'not'
		public Keyword getOpNotKeyword_1_1_0_1() { return cOpNotKeyword_1_1_0_1; }

		//child=Value
		public Assignment getChildAssignment_1_2() { return cChildAssignment_1_2; }

		//Value
		public RuleCall getChildValueParserRuleCall_1_2_0() { return cChildValueParserRuleCall_1_2_0; }
	}

	public class ValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.postech.aadl.xtext.propspec.PropSpec.Value");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cValueAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Assignment cValueAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cValueValueConstantParserRuleCall_0_1_0 = (RuleCall)cValueAssignment_0_1.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cValueAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cValueAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cValueContainmentPathParserRuleCall_1_1_0 = (RuleCall)cValueAssignment_1_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Keyword cLeftParenthesisKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final RuleCall cPSExpressionParserRuleCall_2_1 = (RuleCall)cGroup_2.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_2_2 = (Keyword)cGroup_2.eContents().get(2);
		
		//Value PSExpression:
		//	{Value} value=ValueConstant
		//	| {Value} value=ContainmentPath
		//	| '(' PSExpression ')';
		@Override public ParserRule getRule() { return rule; }

		//{Value} value=ValueConstant | {Value} value=ContainmentPath | '(' PSExpression ')'
		public Alternatives getAlternatives() { return cAlternatives; }

		//{Value} value=ValueConstant
		public Group getGroup_0() { return cGroup_0; }

		//{Value}
		public Action getValueAction_0_0() { return cValueAction_0_0; }

		//value=ValueConstant
		public Assignment getValueAssignment_0_1() { return cValueAssignment_0_1; }

		//ValueConstant
		public RuleCall getValueValueConstantParserRuleCall_0_1_0() { return cValueValueConstantParserRuleCall_0_1_0; }

		//{Value} value=ContainmentPath
		public Group getGroup_1() { return cGroup_1; }

		//{Value}
		public Action getValueAction_1_0() { return cValueAction_1_0; }

		//value=ContainmentPath
		public Assignment getValueAssignment_1_1() { return cValueAssignment_1_1; }

		//ContainmentPath
		public RuleCall getValueContainmentPathParserRuleCall_1_1_0() { return cValueContainmentPathParserRuleCall_1_1_0; }

		//'(' PSExpression ')'
		public Group getGroup_2() { return cGroup_2; }

		//'('
		public Keyword getLeftParenthesisKeyword_2_0() { return cLeftParenthesisKeyword_2_0; }

		//PSExpression
		public RuleCall getPSExpressionParserRuleCall_2_1() { return cPSExpressionParserRuleCall_2_1; }

		//')'
		public Keyword getRightParenthesisKeyword_2_2() { return cRightParenthesisKeyword_2_2; }
	}

	public class PropRefElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.postech.aadl.xtext.propspec.PropSpec.PropRef");
		private final Assignment cDefAssignment = (Assignment)rule.eContents().get(1);
		private final CrossReference cDefPropositionCrossReference_0 = (CrossReference)cDefAssignment.eContents().get(0);
		private final RuleCall cDefPropositionIDTerminalRuleCall_0_1 = (RuleCall)cDefPropositionCrossReference_0.eContents().get(1);
		
		//PropRef:
		//	def=[Proposition];
		@Override public ParserRule getRule() { return rule; }

		//def=[Proposition]
		public Assignment getDefAssignment() { return cDefAssignment; }

		//[Proposition]
		public CrossReference getDefPropositionCrossReference_0() { return cDefPropositionCrossReference_0; }

		//ID
		public RuleCall getDefPropositionIDTerminalRuleCall_0_1() { return cDefPropositionIDTerminalRuleCall_0_1; }
	}

	public class ScopedExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.postech.aadl.xtext.propspec.PropSpec.ScopedExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cPathAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cPathContainmentPathParserRuleCall_0_0 = (RuleCall)cPathAssignment_0.eContents().get(0);
		private final Keyword cVerticalLineKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cExpressionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cExpressionPSExpressionParserRuleCall_2_0 = (RuleCall)cExpressionAssignment_2.eContents().get(0);
		
		//ScopedExpression:
		//	path=ContainmentPath '|' expression=PSExpression;
		@Override public ParserRule getRule() { return rule; }

		//path=ContainmentPath '|' expression=PSExpression
		public Group getGroup() { return cGroup; }

		//path=ContainmentPath
		public Assignment getPathAssignment_0() { return cPathAssignment_0; }

		//ContainmentPath
		public RuleCall getPathContainmentPathParserRuleCall_0_0() { return cPathContainmentPathParserRuleCall_0_0; }

		//'|'
		public Keyword getVerticalLineKeyword_1() { return cVerticalLineKeyword_1; }

		//expression=PSExpression
		public Assignment getExpressionAssignment_2() { return cExpressionAssignment_2; }

		//PSExpression
		public RuleCall getExpressionPSExpressionParserRuleCall_2_0() { return cExpressionPSExpressionParserRuleCall_2_0; }
	}

	public class ValueConstantElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.postech.aadl.xtext.propspec.PropSpec.ValueConstant");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cStringTermParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cUnsignedRealTermParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cUnsignedIntegerTermParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cBooleanLiteralParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		///*
		// * A value constant (string, unsigned real, unsigned integer, boolean)
		// */ ValueConstant aadl2::PropertyValue:
		//	StringTerm | UnsignedRealTerm | UnsignedIntegerTerm | BooleanLiteral;
		@Override public ParserRule getRule() { return rule; }

		//StringTerm | UnsignedRealTerm | UnsignedIntegerTerm | BooleanLiteral
		public Alternatives getAlternatives() { return cAlternatives; }

		//StringTerm
		public RuleCall getStringTermParserRuleCall_0() { return cStringTermParserRuleCall_0; }

		//UnsignedRealTerm
		public RuleCall getUnsignedRealTermParserRuleCall_1() { return cUnsignedRealTermParserRuleCall_1; }

		//UnsignedIntegerTerm
		public RuleCall getUnsignedIntegerTermParserRuleCall_2() { return cUnsignedIntegerTermParserRuleCall_2; }

		//BooleanLiteral
		public RuleCall getBooleanLiteralParserRuleCall_3() { return cBooleanLiteralParserRuleCall_3; }
	}

	public class UnsignedRealTermElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.postech.aadl.xtext.propspec.PropSpec.UnsignedRealTerm");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cValueAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cValueUnsignedRealParserRuleCall_0_0 = (RuleCall)cValueAssignment_0.eContents().get(0);
		private final Assignment cUnitAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cUnitUnitLiteralCrossReference_1_0 = (CrossReference)cUnitAssignment_1.eContents().get(0);
		private final RuleCall cUnitUnitLiteralIDTerminalRuleCall_1_0_1 = (RuleCall)cUnitUnitLiteralCrossReference_1_0.eContents().get(1);
		
		//// only a subset
		//UnsignedRealTerm aadl2::RealLiteral:
		//	value=UnsignedReal unit=[aadl2::UnitLiteral]?;
		@Override public ParserRule getRule() { return rule; }

		//value=UnsignedReal unit=[aadl2::UnitLiteral]?
		public Group getGroup() { return cGroup; }

		//value=UnsignedReal
		public Assignment getValueAssignment_0() { return cValueAssignment_0; }

		//UnsignedReal
		public RuleCall getValueUnsignedRealParserRuleCall_0_0() { return cValueUnsignedRealParserRuleCall_0_0; }

		//unit=[aadl2::UnitLiteral]?
		public Assignment getUnitAssignment_1() { return cUnitAssignment_1; }

		//[aadl2::UnitLiteral]
		public CrossReference getUnitUnitLiteralCrossReference_1_0() { return cUnitUnitLiteralCrossReference_1_0; }

		//ID
		public RuleCall getUnitUnitLiteralIDTerminalRuleCall_1_0_1() { return cUnitUnitLiteralIDTerminalRuleCall_1_0_1; }
	}

	public class UnsignedIntegerTermElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.postech.aadl.xtext.propspec.PropSpec.UnsignedIntegerTerm");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cValueAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cValueUnsignedIntParserRuleCall_0_0 = (RuleCall)cValueAssignment_0.eContents().get(0);
		private final Assignment cUnitAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cUnitUnitLiteralCrossReference_1_0 = (CrossReference)cUnitAssignment_1.eContents().get(0);
		private final RuleCall cUnitUnitLiteralIDTerminalRuleCall_1_0_1 = (RuleCall)cUnitUnitLiteralCrossReference_1_0.eContents().get(1);
		
		//UnsignedIntegerTerm aadl2::IntegerLiteral:
		//	value=UnsignedInt unit=[aadl2::UnitLiteral]?;
		@Override public ParserRule getRule() { return rule; }

		//value=UnsignedInt unit=[aadl2::UnitLiteral]?
		public Group getGroup() { return cGroup; }

		//value=UnsignedInt
		public Assignment getValueAssignment_0() { return cValueAssignment_0; }

		//UnsignedInt
		public RuleCall getValueUnsignedIntParserRuleCall_0_0() { return cValueUnsignedIntParserRuleCall_0_0; }

		//unit=[aadl2::UnitLiteral]?
		public Assignment getUnitAssignment_1() { return cUnitAssignment_1; }

		//[aadl2::UnitLiteral]
		public CrossReference getUnitUnitLiteralCrossReference_1_0() { return cUnitUnitLiteralCrossReference_1_0; }

		//ID
		public RuleCall getUnitUnitLiteralIDTerminalRuleCall_1_0_1() { return cUnitUnitLiteralIDTerminalRuleCall_1_0_1; }
	}

	public class UnsignedRealElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.postech.aadl.xtext.propspec.PropSpec.UnsignedReal");
		private final RuleCall cREAL_LITTerminalRuleCall = (RuleCall)rule.eContents().get(1);
		
		//UnsignedReal aadl2::Real:
		//	REAL_LIT;
		@Override public ParserRule getRule() { return rule; }

		//REAL_LIT
		public RuleCall getREAL_LITTerminalRuleCall() { return cREAL_LITTerminalRuleCall; }
	}

	public class UnsignedIntElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.postech.aadl.xtext.propspec.PropSpec.UnsignedInt");
		private final RuleCall cINTEGER_LITTerminalRuleCall = (RuleCall)rule.eContents().get(1);
		
		//UnsignedInt aadl2::Integer:
		//	INTEGER_LIT;
		@Override public ParserRule getRule() { return rule; }

		//INTEGER_LIT
		public RuleCall getINTEGER_LITTerminalRuleCall() { return cINTEGER_LITTerminalRuleCall; }
	}
	
	
	private final TopElements pTop;
	private final PropertyElements pProperty;
	private final ReachabilityElements pReachability;
	private final InvariantElements pInvariant;
	private final PropositionElements pProposition;
	private final ModeElements pMode;
	private final SYMBOLICElements pSYMBOLIC;
	private final RANDOMElements pRANDOM;
	private final PSExpressionElements pPSExpression;
	private final RelationElements pRelation;
	private final ModifiedExpressionElements pModifiedExpression;
	private final SimpleExpressionElements pSimpleExpression;
	private final TermElements pTerm;
	private final ValueElements pValue;
	private final PropRefElements pPropRef;
	private final ScopedExpressionElements pScopedExpression;
	private final ValueConstantElements pValueConstant;
	private final UnsignedRealTermElements pUnsignedRealTerm;
	private final UnsignedIntegerTermElements pUnsignedIntegerTerm;
	private final UnsignedRealElements pUnsignedReal;
	private final UnsignedIntElements pUnsignedInt;
	
	private final Grammar grammar;

	private final PropertiesGrammarAccess gaProperties;

	@Inject
	public PropSpecGrammarAccess(GrammarProvider grammarProvider,
		PropertiesGrammarAccess gaProperties) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaProperties = gaProperties;
		this.pTop = new TopElements();
		this.pProperty = new PropertyElements();
		this.pReachability = new ReachabilityElements();
		this.pInvariant = new InvariantElements();
		this.pProposition = new PropositionElements();
		this.pMode = new ModeElements();
		this.pSYMBOLIC = new SYMBOLICElements();
		this.pRANDOM = new RANDOMElements();
		this.pPSExpression = new PSExpressionElements();
		this.pRelation = new RelationElements();
		this.pModifiedExpression = new ModifiedExpressionElements();
		this.pSimpleExpression = new SimpleExpressionElements();
		this.pTerm = new TermElements();
		this.pValue = new ValueElements();
		this.pPropRef = new PropRefElements();
		this.pScopedExpression = new ScopedExpressionElements();
		this.pValueConstant = new ValueConstantElements();
		this.pUnsignedRealTerm = new UnsignedRealTermElements();
		this.pUnsignedIntegerTerm = new UnsignedIntegerTermElements();
		this.pUnsignedReal = new UnsignedRealElements();
		this.pUnsignedInt = new UnsignedIntElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("edu.postech.aadl.xtext.propspec.PropSpec".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	

	public PropertiesGrammarAccess getPropertiesGrammarAccess() {
		return gaProperties;
	}

	
	//Top:
	//	'name' ':' name=ID ';' & 'model' ':' model=[aadl2::ComponentClassifier|QCREF] ';' & 'instance' ':' path=STRING ';' &
	//	(proposition+=Proposition | property+=Property)*;
	public TopElements getTopAccess() {
		return pTop;
	}
	
	public ParserRule getTopRule() {
		return getTopAccess().getRule();
	}

	//Property:
	//	Reachability | Invariant;
	public PropertyElements getPropertyAccess() {
		return pProperty;
	}
	
	public ParserRule getPropertyRule() {
		return getPropertyAccess().getRule();
	}

	//Reachability:
	//	'reachability' '[' name=ID ']' ':' (initCond=PSExpression '==>')? goalCond=PSExpression 'in' 'time' bound=INTVALUE
	//	';';
	public ReachabilityElements getReachabilityAccess() {
		return pReachability;
	}
	
	public ParserRule getReachabilityRule() {
		return getReachabilityAccess().getRule();
	}

	//Invariant:
	//	'invariant' '[' name=ID ']' ':' (initCond=PSExpression '==>')? goalCond=PSExpression 'in' 'time' bound=INTVALUE ';';
	public InvariantElements getInvariantAccess() {
		return pInvariant;
	}
	
	public ParserRule getInvariantRule() {
		return getInvariantAccess().getRule();
	}

	//Proposition:
	//	'proposition' '[' name=ID ']' ':' expression=PSExpression ';';
	public PropositionElements getPropositionAccess() {
		return pProposition;
	}
	
	public ParserRule getPropositionRule() {
		return getPropositionAccess().getRule();
	}

	///*
	// * Mode declaration (for internal use)
	// */ Mode:
	//	SYMBOLIC | RANDOM;
	public ModeElements getModeAccess() {
		return pMode;
	}
	
	public ParserRule getModeRule() {
		return getModeAccess().getRule();
	}

	//SYMBOLIC:
	//	name="symbolic";
	public SYMBOLICElements getSYMBOLICAccess() {
		return pSYMBOLIC;
	}
	
	public ParserRule getSYMBOLICRule() {
		return getSYMBOLICAccess().getRule();
	}

	//RANDOM:
	//	name="random" '(' seed=INTVALUE ')';
	public RANDOMElements getRANDOMAccess() {
		return pRANDOM;
	}
	
	public ParserRule getRANDOMRule() {
		return getRANDOMAccess().getRule();
	}

	///* 
	// * Maude proposition language syntax
	// */ /*
	// * A subset of the behavior expression language
	// */ PSExpression:
	//	ScopedExpression ({BinaryExpression.left=current} op=('and' | 'or' | 'xor') right=PSExpression)*
	//	| Relation ({BinaryExpression.left=current} op=('and' | 'or' | 'xor') right=Relation)*;
	public PSExpressionElements getPSExpressionAccess() {
		return pPSExpression;
	}
	
	public ParserRule getPSExpressionRule() {
		return getPSExpressionAccess().getRule();
	}

	//Relation PSExpression:
	//	ModifiedExpression ({BinaryExpression.left=current} op=('=' | '!=' | '<' | '<=' | '>' | '>=')
	//	right=ModifiedExpression)?
	//	| '?' PropRef;
	public RelationElements getRelationAccess() {
		return pRelation;
	}
	
	public ParserRule getRelationRule() {
		return getRelationAccess().getRule();
	}

	//ModifiedExpression PSExpression:
	//	SimpleExpression
	//	| {UnaryExpression} op=('+' | '-') child=SimpleExpression;
	public ModifiedExpressionElements getModifiedExpressionAccess() {
		return pModifiedExpression;
	}
	
	public ParserRule getModifiedExpressionRule() {
		return getModifiedExpressionAccess().getRule();
	}

	//SimpleExpression PSExpression:
	//	Term ({BinaryExpression.left=current} op=('+' | '-') right=Term)*;
	public SimpleExpressionElements getSimpleExpressionAccess() {
		return pSimpleExpression;
	}
	
	public ParserRule getSimpleExpressionRule() {
		return getSimpleExpressionAccess().getRule();
	}

	//Term PSExpression:
	//	Value ({BinaryExpression.left=current} op=('*' | '/') right=Value)*
	//	| {UnaryExpression} op=('abs' | 'not') child=Value;
	public TermElements getTermAccess() {
		return pTerm;
	}
	
	public ParserRule getTermRule() {
		return getTermAccess().getRule();
	}

	//Value PSExpression:
	//	{Value} value=ValueConstant
	//	| {Value} value=ContainmentPath
	//	| '(' PSExpression ')';
	public ValueElements getValueAccess() {
		return pValue;
	}
	
	public ParserRule getValueRule() {
		return getValueAccess().getRule();
	}

	//PropRef:
	//	def=[Proposition];
	public PropRefElements getPropRefAccess() {
		return pPropRef;
	}
	
	public ParserRule getPropRefRule() {
		return getPropRefAccess().getRule();
	}

	//ScopedExpression:
	//	path=ContainmentPath '|' expression=PSExpression;
	public ScopedExpressionElements getScopedExpressionAccess() {
		return pScopedExpression;
	}
	
	public ParserRule getScopedExpressionRule() {
		return getScopedExpressionAccess().getRule();
	}

	///*
	// * A value constant (string, unsigned real, unsigned integer, boolean)
	// */ ValueConstant aadl2::PropertyValue:
	//	StringTerm | UnsignedRealTerm | UnsignedIntegerTerm | BooleanLiteral;
	public ValueConstantElements getValueConstantAccess() {
		return pValueConstant;
	}
	
	public ParserRule getValueConstantRule() {
		return getValueConstantAccess().getRule();
	}

	//// only a subset
	//UnsignedRealTerm aadl2::RealLiteral:
	//	value=UnsignedReal unit=[aadl2::UnitLiteral]?;
	public UnsignedRealTermElements getUnsignedRealTermAccess() {
		return pUnsignedRealTerm;
	}
	
	public ParserRule getUnsignedRealTermRule() {
		return getUnsignedRealTermAccess().getRule();
	}

	//UnsignedIntegerTerm aadl2::IntegerLiteral:
	//	value=UnsignedInt unit=[aadl2::UnitLiteral]?;
	public UnsignedIntegerTermElements getUnsignedIntegerTermAccess() {
		return pUnsignedIntegerTerm;
	}
	
	public ParserRule getUnsignedIntegerTermRule() {
		return getUnsignedIntegerTermAccess().getRule();
	}

	//UnsignedReal aadl2::Real:
	//	REAL_LIT;
	public UnsignedRealElements getUnsignedRealAccess() {
		return pUnsignedReal;
	}
	
	public ParserRule getUnsignedRealRule() {
		return getUnsignedRealAccess().getRule();
	}

	//UnsignedInt aadl2::Integer:
	//	INTEGER_LIT;
	public UnsignedIntElements getUnsignedIntAccess() {
		return pUnsignedInt;
	}
	
	public ParserRule getUnsignedIntRule() {
		return getUnsignedIntAccess().getRule();
	}

	//PModel aadl2::Element:
	//	ContainedPropertyAssociation //| BasicPropertyAssociation | PropertyAssociation
	//;
	public PropertiesGrammarAccess.PModelElements getPModelAccess() {
		return gaProperties.getPModelAccess();
	}
	
	public ParserRule getPModelRule() {
		return getPModelAccess().getRule();
	}

	//// Properties
	//ContainedPropertyAssociation aadl2::PropertyAssociation:
	//	property=[aadl2::Property|QPREF] ('=>' | append?='+=>') constant?='constant'? (ownedValue+=OptionalModalPropertyValue
	//	(',' ownedValue+=OptionalModalPropertyValue)*) (AppliesToKeywords appliesTo+=ContainmentPath (','
	//	appliesTo+=ContainmentPath)*)? (InBindingKeywords '(' inBinding+=[aadl2::Classifier|QCREF] ')')?
	//	';';
	public PropertiesGrammarAccess.ContainedPropertyAssociationElements getContainedPropertyAssociationAccess() {
		return gaProperties.getContainedPropertyAssociationAccess();
	}
	
	public ParserRule getContainedPropertyAssociationRule() {
		return getContainedPropertyAssociationAccess().getRule();
	}

	//PropertyAssociation aadl2::PropertyAssociation:
	//	property=[aadl2::Property|QPREF] ('=>' | append?='+=>') constant?='constant'? (ownedValue+=OptionalModalPropertyValue
	//	(',' ownedValue+=OptionalModalPropertyValue)*) (InBindingKeywords '(' inBinding+=[aadl2::Classifier|QCREF] ')')?
	//	';';
	public PropertiesGrammarAccess.PropertyAssociationElements getPropertyAssociationAccess() {
		return gaProperties.getPropertyAssociationAccess();
	}
	
	public ParserRule getPropertyAssociationRule() {
		return getPropertyAssociationAccess().getRule();
	}

	//BasicPropertyAssociation aadl2::PropertyAssociation:
	//	property=[aadl2::Property|QPREF]
	//	'=>' ownedValue+=PropertyValue ';';
	public PropertiesGrammarAccess.BasicPropertyAssociationElements getBasicPropertyAssociationAccess() {
		return gaProperties.getBasicPropertyAssociationAccess();
	}
	
	public ParserRule getBasicPropertyAssociationRule() {
		return getBasicPropertyAssociationAccess().getRule();
	}

	//ContainmentPath aadl2::ContainedNamedElement:
	//	path=ContainmentPathElement
	//	//	( 'annex' containmentPathElement+=AnnexPath )?
	//;
	public PropertiesGrammarAccess.ContainmentPathElements getContainmentPathAccess() {
		return gaProperties.getContainmentPathAccess();
	}
	
	public ParserRule getContainmentPathRule() {
		return getContainmentPathAccess().getRule();
	}

	////AnnexPath returns aadl2::ContainmentPathElement:
	////	 namedElement=[aadl2::NamedElement|IDANNEXTEXT];
	//ModalPropertyValue aadl2::ModalPropertyValue:
	//	ownedValue=PropertyExpression
	//	InModesKeywords '('
	//	inMode+=[aadl2::Mode] (',' inMode+=[aadl2::Mode])*
	//	')';
	public PropertiesGrammarAccess.ModalPropertyValueElements getModalPropertyValueAccess() {
		return gaProperties.getModalPropertyValueAccess();
	}
	
	public ParserRule getModalPropertyValueRule() {
		return getModalPropertyValueAccess().getRule();
	}

	//OptionalModalPropertyValue aadl2::ModalPropertyValue:
	//	ownedValue=PropertyExpression (InModesKeywords '('
	//	inMode+=[aadl2::Mode] (',' inMode+=[aadl2::Mode])*
	//	')')?;
	public PropertiesGrammarAccess.OptionalModalPropertyValueElements getOptionalModalPropertyValueAccess() {
		return gaProperties.getOptionalModalPropertyValueAccess();
	}
	
	public ParserRule getOptionalModalPropertyValueRule() {
		return getOptionalModalPropertyValueAccess().getRule();
	}

	//// &&&&&&&&&& handling of in binding
	//PropertyValue aadl2::ModalPropertyValue:
	//	ownedValue=PropertyExpression;
	public PropertiesGrammarAccess.PropertyValueElements getPropertyValueAccess() {
		return gaProperties.getPropertyValueAccess();
	}
	
	public ParserRule getPropertyValueRule() {
		return getPropertyValueAccess().getRule();
	}

	//PropertyExpression aadl2::PropertyExpression:
	//	RecordTerm | ReferenceTerm | ComponentClassifierTerm
	//	| ComputedTerm | StringTerm | NumericRangeTerm
	//	| RealTerm | IntegerTerm
	//	| ListTerm
	//	| BooleanLiteral | LiteralorReferenceTerm;
	public PropertiesGrammarAccess.PropertyExpressionElements getPropertyExpressionAccess() {
		return gaProperties.getPropertyExpressionAccess();
	}
	
	public ParserRule getPropertyExpressionRule() {
		return getPropertyExpressionAccess().getRule();
	}

	//LiteralorReferenceTerm aadl2::NamedValue:
	//	namedValue=[aadl2::AbstractNamedValue|QPREF];
	public PropertiesGrammarAccess.LiteralorReferenceTermElements getLiteralorReferenceTermAccess() {
		return gaProperties.getLiteralorReferenceTermAccess();
	}
	
	public ParserRule getLiteralorReferenceTermRule() {
		return getLiteralorReferenceTermAccess().getRule();
	}

	//BooleanLiteral aadl2::BooleanLiteral:
	//	{aadl2::BooleanLiteral} (value?='true' | 'false');
	public PropertiesGrammarAccess.BooleanLiteralElements getBooleanLiteralAccess() {
		return gaProperties.getBooleanLiteralAccess();
	}
	
	public ParserRule getBooleanLiteralRule() {
		return getBooleanLiteralAccess().getRule();
	}

	//ConstantValue aadl2::NamedValue:
	//	namedValue=[aadl2::PropertyConstant|QPREF];
	public PropertiesGrammarAccess.ConstantValueElements getConstantValueAccess() {
		return gaProperties.getConstantValueAccess();
	}
	
	public ParserRule getConstantValueRule() {
		return getConstantValueAccess().getRule();
	}

	//ReferenceTerm aadl2::ReferenceValue:
	//	'reference' '('
	//	path=ContainmentPathElement
	//	//	( 'annex' ID '{**' 
	//	//	containmentPathElement+=ContainmentPathElement
	//	//	( '.' containmentPathElement+=ContainmentPathElement)*
	//	//	'**}')?
	//	')';
	public PropertiesGrammarAccess.ReferenceTermElements getReferenceTermAccess() {
		return gaProperties.getReferenceTermAccess();
	}
	
	public ParserRule getReferenceTermRule() {
		return getReferenceTermAccess().getRule();
	}

	//RecordTerm aadl2::RecordValue:
	//	'['
	//	ownedFieldValue+=FieldPropertyAssociation+
	//	']';
	public PropertiesGrammarAccess.RecordTermElements getRecordTermAccess() {
		return gaProperties.getRecordTermAccess();
	}
	
	public ParserRule getRecordTermRule() {
		return getRecordTermAccess().getRule();
	}

	//OldRecordTerm aadl2::RecordValue:
	//	'('
	//	ownedFieldValue+=FieldPropertyAssociation+
	//	')';
	public PropertiesGrammarAccess.OldRecordTermElements getOldRecordTermAccess() {
		return gaProperties.getOldRecordTermAccess();
	}
	
	public ParserRule getOldRecordTermRule() {
		return getOldRecordTermAccess().getRule();
	}

	//ComputedTerm aadl2::ComputedValue:
	//	'compute' '('
	//	function=ID
	//	')';
	public PropertiesGrammarAccess.ComputedTermElements getComputedTermAccess() {
		return gaProperties.getComputedTermAccess();
	}
	
	public ParserRule getComputedTermRule() {
		return getComputedTermAccess().getRule();
	}

	//ComponentClassifierTerm aadl2::ClassifierValue:
	//	'classifier' '('
	//	classifier=[aadl2::ComponentClassifier|QCREF]
	//	')';
	public PropertiesGrammarAccess.ComponentClassifierTermElements getComponentClassifierTermAccess() {
		return gaProperties.getComponentClassifierTermAccess();
	}
	
	public ParserRule getComponentClassifierTermRule() {
		return getComponentClassifierTermAccess().getRule();
	}

	//ListTerm aadl2::ListValue:
	//	{aadl2::ListValue}
	//	'(' (ownedListElement+=PropertyExpression (',' ownedListElement+=PropertyExpression)*)?
	//	')';
	public PropertiesGrammarAccess.ListTermElements getListTermAccess() {
		return gaProperties.getListTermAccess();
	}
	
	public ParserRule getListTermRule() {
		return getListTermAccess().getRule();
	}

	//FieldPropertyAssociation aadl2::BasicPropertyAssociation:
	//	property=[aadl2::BasicProperty]
	//	'=>'
	//	ownedValue=PropertyExpression
	//	';';
	public PropertiesGrammarAccess.FieldPropertyAssociationElements getFieldPropertyAssociationAccess() {
		return gaProperties.getFieldPropertyAssociationAccess();
	}
	
	public ParserRule getFieldPropertyAssociationRule() {
		return getFieldPropertyAssociationAccess().getRule();
	}

	//// from AADL2
	//// need to add annex path element
	//ContainmentPathElement aadl2::ContainmentPathElement:
	//	(namedElement=[aadl2::NamedElement] arrayRange+=ArrayRange*) ('.' path=ContainmentPathElement)?
	//	//	 | 	 'annex' namedElement=[aadl2::NamedElement|ID]
	//;
	public PropertiesGrammarAccess.ContainmentPathElementElements getContainmentPathElementAccess() {
		return gaProperties.getContainmentPathElementAccess();
	}
	
	public ParserRule getContainmentPathElementRule() {
		return getContainmentPathElementAccess().getRule();
	}

	//ANNEXREF: // check what values are ok inside ** **
	//	'{' STAR STAR ID STAR STAR '}';
	public PropertiesGrammarAccess.ANNEXREFElements getANNEXREFAccess() {
		return gaProperties.getANNEXREFAccess();
	}
	
	public ParserRule getANNEXREFRule() {
		return getANNEXREFAccess().getRule();
	}

	//PlusMinus aadl2::OperationKind:
	//	'+' | '-';
	public PropertiesGrammarAccess.PlusMinusElements getPlusMinusAccess() {
		return gaProperties.getPlusMinusAccess();
	}
	
	public ParserRule getPlusMinusRule() {
		return getPlusMinusAccess().getRule();
	}

	//StringTerm aadl2::StringLiteral:
	//	value=NoQuoteString;
	public PropertiesGrammarAccess.StringTermElements getStringTermAccess() {
		return gaProperties.getStringTermAccess();
	}
	
	public ParserRule getStringTermRule() {
		return getStringTermAccess().getRule();
	}

	//NoQuoteString:
	//	STRING;
	public PropertiesGrammarAccess.NoQuoteStringElements getNoQuoteStringAccess() {
		return gaProperties.getNoQuoteStringAccess();
	}
	
	public ParserRule getNoQuoteStringRule() {
		return getNoQuoteStringAccess().getRule();
	}

	//ArrayRange aadl2::ArrayRange:
	//	{aadl2::ArrayRange}
	//	'[' lowerBound=INTVALUE ('..' upperBound=INTVALUE)?
	//	']';
	public PropertiesGrammarAccess.ArrayRangeElements getArrayRangeAccess() {
		return gaProperties.getArrayRangeAccess();
	}
	
	public ParserRule getArrayRangeRule() {
		return getArrayRangeAccess().getRule();
	}

	//SignedConstant aadl2::Operation:
	//	op=PlusMinus ownedPropertyExpression+=ConstantValue;
	public PropertiesGrammarAccess.SignedConstantElements getSignedConstantAccess() {
		return gaProperties.getSignedConstantAccess();
	}
	
	public ParserRule getSignedConstantRule() {
		return getSignedConstantAccess().getRule();
	}

	//IntegerTerm aadl2::IntegerLiteral:
	//	value=SignedInt unit=[aadl2::UnitLiteral]?;
	public PropertiesGrammarAccess.IntegerTermElements getIntegerTermAccess() {
		return gaProperties.getIntegerTermAccess();
	}
	
	public ParserRule getIntegerTermRule() {
		return getIntegerTermAccess().getRule();
	}

	//SignedInt aadl2::Integer:
	//	('+' | '-')? INTEGER_LIT;
	public PropertiesGrammarAccess.SignedIntElements getSignedIntAccess() {
		return gaProperties.getSignedIntAccess();
	}
	
	public ParserRule getSignedIntRule() {
		return getSignedIntAccess().getRule();
	}

	//RealTerm aadl2::RealLiteral:
	//	value=SignedReal unit=[aadl2::UnitLiteral]?;
	public PropertiesGrammarAccess.RealTermElements getRealTermAccess() {
		return gaProperties.getRealTermAccess();
	}
	
	public ParserRule getRealTermRule() {
		return getRealTermAccess().getRule();
	}

	//SignedReal aadl2::Real:
	//	('+' | '-')? REAL_LIT;
	public PropertiesGrammarAccess.SignedRealElements getSignedRealAccess() {
		return gaProperties.getSignedRealAccess();
	}
	
	public ParserRule getSignedRealRule() {
		return getSignedRealAccess().getRule();
	}

	//NumericRangeTerm aadl2::RangeValue:
	//	minimum=NumAlt //(RealTerm|IntegerTerm| SignedConstant | ConstantValue)  
	//	'..' maximum=NumAlt ('delta' delta=NumAlt //(RealTerm|IntegerTerm| SignedConstant | ConstantValue)
	//)?;
	public PropertiesGrammarAccess.NumericRangeTermElements getNumericRangeTermAccess() {
		return gaProperties.getNumericRangeTermAccess();
	}
	
	public ParserRule getNumericRangeTermRule() {
		return getNumericRangeTermAccess().getRule();
	}

	//NumAlt aadl2::PropertyExpression:
	//	RealTerm | IntegerTerm | SignedConstant | ConstantValue;
	public PropertiesGrammarAccess.NumAltElements getNumAltAccess() {
		return gaProperties.getNumAltAccess();
	}
	
	public ParserRule getNumAltRule() {
		return getNumAltAccess().getRule();
	}

	//AppliesToKeywords:
	//	'applies' 'to';
	public PropertiesGrammarAccess.AppliesToKeywordsElements getAppliesToKeywordsAccess() {
		return gaProperties.getAppliesToKeywordsAccess();
	}
	
	public ParserRule getAppliesToKeywordsRule() {
		return getAppliesToKeywordsAccess().getRule();
	}

	//InBindingKeywords:
	//	'in' 'binding';
	public PropertiesGrammarAccess.InBindingKeywordsElements getInBindingKeywordsAccess() {
		return gaProperties.getInBindingKeywordsAccess();
	}
	
	public ParserRule getInBindingKeywordsRule() {
		return getInBindingKeywordsAccess().getRule();
	}

	//InModesKeywords:
	//	'in' 'modes';
	public PropertiesGrammarAccess.InModesKeywordsElements getInModesKeywordsAccess() {
		return gaProperties.getInModesKeywordsAccess();
	}
	
	public ParserRule getInModesKeywordsRule() {
		return getInModesKeywordsAccess().getRule();
	}

	//terminal SL_COMMENT:
	//	'--' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaProperties.getSL_COMMENTRule();
	} 

	//INTVALUE aadl2::Integer:
	//	INTEGER_LIT //NUMERAL 	
	//;
	public PropertiesGrammarAccess.INTVALUEElements getINTVALUEAccess() {
		return gaProperties.getINTVALUEAccess();
	}
	
	public ParserRule getINTVALUERule() {
		return getINTVALUEAccess().getRule();
	}

	//terminal fragment EXPONENT:
	//	('e' | 'E') ('+' | '-')? DIGIT+;
	public TerminalRule getEXPONENTRule() {
		return gaProperties.getEXPONENTRule();
	} 

	//terminal fragment INT_EXPONENT:
	//	('e' | 'E') '+'? DIGIT+;
	public TerminalRule getINT_EXPONENTRule() {
		return gaProperties.getINT_EXPONENTRule();
	} 

	//terminal REAL_LIT:
	//	DIGIT+ ('_' DIGIT+)* ('.' DIGIT+ ('_' DIGIT+)* EXPONENT?);
	public TerminalRule getREAL_LITRule() {
		return gaProperties.getREAL_LITRule();
	} 

	//terminal INTEGER_LIT:
	//	DIGIT+ ('_' DIGIT+)* ('#' BASED_INTEGER '#' INT_EXPONENT? | INT_EXPONENT?);
	public TerminalRule getINTEGER_LITRule() {
		return gaProperties.getINTEGER_LITRule();
	} 

	//terminal fragment DIGIT:
	//	'0'..'9';
	public TerminalRule getDIGITRule() {
		return gaProperties.getDIGITRule();
	} 

	//terminal fragment EXTENDED_DIGIT:
	//	'0'..'9' | 'a'..'f' | 'A'..'F';
	public TerminalRule getEXTENDED_DIGITRule() {
		return gaProperties.getEXTENDED_DIGITRule();
	} 

	//terminal fragment BASED_INTEGER:
	//	EXTENDED_DIGIT ('_'? EXTENDED_DIGIT)*;
	public TerminalRule getBASED_INTEGERRule() {
		return gaProperties.getBASED_INTEGERRule();
	} 

	//QCLREF:
	//	ID '::' ID;
	public PropertiesGrammarAccess.QCLREFElements getQCLREFAccess() {
		return gaProperties.getQCLREFAccess();
	}
	
	public ParserRule getQCLREFRule() {
		return getQCLREFAccess().getRule();
	}

	//QPREF:
	//	ID ('::' ID)?;
	public PropertiesGrammarAccess.QPREFElements getQPREFAccess() {
		return gaProperties.getQPREFAccess();
	}
	
	public ParserRule getQPREFRule() {
		return getQPREFAccess().getRule();
	}

	//QCREF:
	//	(ID '::')* ID ('.' ID)?;
	public PropertiesGrammarAccess.QCREFElements getQCREFAccess() {
		return gaProperties.getQCREFAccess();
	}
	
	public ParserRule getQCREFRule() {
		return getQCREFAccess().getRule();
	}

	//STAR:
	//	'*';
	public PropertiesGrammarAccess.STARElements getSTARAccess() {
		return gaProperties.getSTARAccess();
	}
	
	public ParserRule getSTARRule() {
		return getSTARAccess().getRule();
	}

	//terminal STRING:
	//	'"' ('\\' ('b' | 't' | 'n' | 'f' | 'r' | 'u' | '"' | "'" | '\\') | !('\\' | '"'))* '"' |
	//	"'" ('\\' ('b' | 't' | 'n' | 'f' | 'r' | 'u' | '"' | "'" | '\\') | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaProperties.getSTRINGRule();
	} 

	//terminal ID:
	//	('a'..'z'
	//	| 'A'..'Z') ('_'? ('a'..'z'
	//	| 'A'..'Z'
	//	| '0'..'9'))*;
	public TerminalRule getIDRule() {
		return gaProperties.getIDRule();
	} 

	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaProperties.getWSRule();
	} 
}
