package DroneControl
public
	with Base_Types;
	with DroneSpec;
	with Data_Model;
        
	system FormDroneControl
		features
			currX: in data port Base_Types::Float;
			currVX: in data port Base_Types::Float;
			inX: in data port Base_Types::Float;
			inVX: in data port Base_Types::Float;		
			outX : out data port Base_Types::Float;
			outVX: out data port Base_Types::Float;	
			accX: out data port Base_Types::Float;
			refX: in data port Base_Types::Float;
			refVX: in data port Base_Types::Float;			
	end FormDroneControl;
	system implementation FormDroneControl.impl
		subcomponents
			droneProc: process FormDroneControlProc.impl;
		connections
			C1: port currX -> droneProc.currX;
			C2: port currVX -> droneProc.currVX;
			C3: port inX -> droneProc.inX;
			C4: port inVX -> droneProc.inVX;
			C5: port droneProc.outX -> outX;
			C6: port droneProc.outVX -> outVX;
			C7: port droneProc.accX -> accX;
			C8: port refX -> droneProc.refX;
			C9: port refVX -> droneProc.refVX;			
	end FormDroneControl.impl;
	
	process FormDroneControlProc
		features
			currX: in data port Base_Types::Float;
			currVX: in data port Base_Types::Float;
			inX: in data port Base_Types::Float;
			inVX: in data port Base_Types::Float;		
			outX : out data port Base_Types::Float;
			outVX: out data port Base_Types::Float; 	
			accX: out data port Base_Types::Float;
			refX: in data port Base_Types::Float;
			refVX: in data port Base_Types::Float;			
	end FormDroneControlProc;
	process implementation FormDroneControlProc.impl
		subcomponents
			droneThread: thread FormDroneControlThread.impl;
		connections
			C1: port currX -> droneThread.currX;
			C2: port currVX -> droneThread.currVX;
			C3: port inX -> droneThread.inX;
			C4: port inVX -> droneThread.inVX;
			C5: port droneThread.outX -> outX;
			C6: port droneThread.outVX -> outVX;
			C7: port droneThread.accX -> accX;
			C8: port refX -> droneThread.refX;
			C9: port refVX -> droneThread.refVX;			
	end FormDroneControlProc.impl;
	
	thread FormDroneControlThread
		features
			currX: in data port Base_Types::Float;
			currVX: in data port Base_Types::Float;
			inX: in data port Base_Types::Float;
			inVX: in data port Base_Types::Float;		
			outX : out data port Base_Types::Float;
			outVX: out data port Base_Types::Float; 	
			accX: out data port Base_Types::Float;
			refX: in data port Base_Types::Float;
			refVX: in data port Base_Types::Float;			
		properties
			Dispatch_Protocol => Periodic;
	end FormDroneControlThread;


	thread implementation FormDroneControlThread.impl
		subcomponents
			offsetX: data Base_Types::Float;
			refVX0: data Base_Types::Float {Data_Model::Initial_Value => ("0");};
		annex behavior_specification {**
			variables
				nx, refaX : Base_Types::Float;
			states
				init : initial complete state;
				exec, output : state;
			transitions
				init -[on dispatch]-> exec;
                exec -[abs(currX - inX) < 0.3]-> output{
                	accX := -currVX
                };
              	exec -[otherwise]-> output {
                   	refaX := (refVX - refVX0);
                   	nx := refaX - #DroneSpec::alpha * (currX - offsetX - refX + #DroneSpec::gamma * (currVX - refVX))
                   		 	- #DroneSpec::A * (currX - offsetX - inX + #DroneSpec::gamma * (currVX - inVX));
					if (nx > 0.5)		accX := 40
					elsif (nx > 0)		accX := 0
					else				accX := -40
					end if
               	};
                output -[ ]-> init {
                  	outX := currX - offsetX;
                  	outVX := currVX;
                   	refVX0 := refVX
             	};
	**};
	end FormDroneControlThread.impl;
	
end DroneControl;
