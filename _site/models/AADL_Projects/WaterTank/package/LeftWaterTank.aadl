package LeftWaterTank
public
	with Base_Types;
	with Data_Model;
	
	system LeftWaterTank
		features
			on_control: out event port;
			off_control: out event port;
			released_water: out data port Base_Types::Float {Data_Model::Initial_Value => ("0");};
			power: out data port Base_Types::Float {Data_Model::Initial_Value => ("0");};
			decreased_water: in data port Base_Types::Float;
			curr_water: in data port Base_Types::Float;
	end LeftWaterTank;
	
	system implementation LeftWaterTank.simple
		subcomponents
			ctrlProc: process LeftWaterTankProc.simple;
		connections
			C1: port ctrlProc.on_control -> on_control;
			C2: port ctrlProc.off_control -> off_control;
			C4: port ctrlProc.released_water -> released_water;
			C5: port ctrlProc.power -> power;
			C6: port decreased_water -> ctrlProc.decreased_water;
			C7: port curr_water -> ctrlProc.curr_water;
	end LeftWaterTank.simple;
	
	system implementation LeftWaterTank.complex extends LeftWaterTank.simple
		subcomponents
			ctrlProc: refined to process LeftWaterTankProc.complex;		
	end LeftWaterTank.complex;
	
	process LeftWaterTankProc
		features
			on_control: out event port;
			off_control: out event port;
			released_water: out data port Base_Types::Float;
			power: out data port Base_Types::Float;
			decreased_water: in data port Base_Types::Float;
			curr_water: in data port Base_Types::Float;
	end LeftWaterTankProc;
	
	process implementation LeftWaterTankProc.simple
		subcomponents
			ctrlThread: thread LeftWaterTankThread.simple;
		connections
			C1: port ctrlThread.on_control -> on_control;
			C2: port ctrlThread.off_control -> off_control;
			C4: port ctrlThread.released_water -> released_water;
			C5: port ctrlThread.power -> power;
			C6: port decreased_water -> ctrlThread.decreased_water;
			C7: port curr_water -> ctrlThread.curr_water;
	end LeftWaterTankProc.simple;
	
	process implementation LeftWaterTankProc.complex extends LeftWaterTankProc.simple
		subcomponents
			ctrlThread: refined to thread LeftWaterTankThread.complex;		
	end LeftWaterTankProc.complex;
	
	
	thread LeftWaterTankThread
		features
			on_control: out event port;
			off_control: out event port;
			released_water: out data port Base_Types::Float;
			decreased_water: in data port Base_Types::Float;
			curr_water: in data port Base_Types::Float;
			power: out data port Base_Types::Float;
		properties
			Dispatch_Protocol => Periodic;
	end LeftWaterTankThread;
	
	thread implementation LeftWaterTankThread.simple
		annex behavior_specification{**
			states
				init : initial complete state;
				exec : state;
			transitions
				init -[ on dispatch ]-> exec {
					released_water := decreased_water
				};
				exec -[ true ]-> init {
					if (curr_water <= 33)
						power := 0.5;
						on_control!
					elsif (curr_water <= 39)
						power := 0.3;
						on_control!
					else {
						power := 0.0;
						off_control!
					}
					end if
				};
		**};
	end LeftWaterTankThread.simple;
	
	thread implementation LeftWaterTankThread.complex extends LeftWaterTankThread.simple
        annex behavior_specification{**
            states
                init : initial complete state;
                exec : state;
            transitions
                init -[ on dispatch ]-> exec {
                    released_water := decreased_water
                };
                exec -[curr_water <= 42]-> init {
                    if (curr_water <= 30)
                        power := 0.5
                    elsif (curr_water <= 33)
                        power := 0.4
                    elsif (curr_water <= 36)
                        power := 0.3
                    elsif (curr_water <= 39)
                        power := 0.2
                    else {
                        power := 0.1
                    }
                    end if;
                    on_control!
                };
                exec -[otherwise]-> init {
                    off_control!
                };
        **};
	end LeftWaterTankThread.complex;
	
end LeftWaterTank;
